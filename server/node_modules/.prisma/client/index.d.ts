
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model tbl_User
 * 
 */
export type tbl_User = {
  id: string
  Username: string
  Password: string
  noHp: string
  email: string
  Role: Role
}

/**
 * Model tbl_Menu
 * 
 */
export type tbl_Menu = {
  id: string
  nameMenu: string
  priceMenu: number
  descMenu: string
}

/**
 * Model tbl_detailTransaction
 * 
 */
export type tbl_detailTransaction = {
  id: string
  idTransaction: string
  total: number
  tbl_UserId: string | null
}

/**
 * Model tbl_detailOutlet
 * 
 */
export type tbl_detailOutlet = {
  id: string
  idUser: string
  alamatOutlet: string
  Status: string
}

/**
 * Model tbl_Transaction
 * 
 */
export type tbl_Transaction = {
  id: string
  idUser: string
  idOutlet: string
  idMenu: string
  status: string
  payment: string
  time: Date
  promo: string
}

/**
 * Model tbl_log
 * 
 */
export type tbl_log = {
  id: string
  jenisLog: string
  created_at: Date
  idUser: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  ADMIN: 'ADMIN',
  COSTUMER: 'COSTUMER'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tbl_Users
 * const tbl_Users = await prisma.tbl_User.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tbl_Users
   * const tbl_Users = await prisma.tbl_User.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.tbl_User`: Exposes CRUD operations for the **tbl_User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_Users
    * const tbl_Users = await prisma.tbl_User.findMany()
    * ```
    */
  get tbl_User(): Prisma.tbl_UserDelegate<GlobalReject>;

  /**
   * `prisma.tbl_Menu`: Exposes CRUD operations for the **tbl_Menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_Menus
    * const tbl_Menus = await prisma.tbl_Menu.findMany()
    * ```
    */
  get tbl_Menu(): Prisma.tbl_MenuDelegate<GlobalReject>;

  /**
   * `prisma.tbl_detailTransaction`: Exposes CRUD operations for the **tbl_detailTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_detailTransactions
    * const tbl_detailTransactions = await prisma.tbl_detailTransaction.findMany()
    * ```
    */
  get tbl_detailTransaction(): Prisma.tbl_detailTransactionDelegate<GlobalReject>;

  /**
   * `prisma.tbl_detailOutlet`: Exposes CRUD operations for the **tbl_detailOutlet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_detailOutlets
    * const tbl_detailOutlets = await prisma.tbl_detailOutlet.findMany()
    * ```
    */
  get tbl_detailOutlet(): Prisma.tbl_detailOutletDelegate<GlobalReject>;

  /**
   * `prisma.tbl_Transaction`: Exposes CRUD operations for the **tbl_Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_Transactions
    * const tbl_Transactions = await prisma.tbl_Transaction.findMany()
    * ```
    */
  get tbl_Transaction(): Prisma.tbl_TransactionDelegate<GlobalReject>;

  /**
   * `prisma.tbl_log`: Exposes CRUD operations for the **tbl_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_logs
    * const tbl_logs = await prisma.tbl_log.findMany()
    * ```
    */
  get tbl_log(): Prisma.tbl_logDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    tbl_User: 'tbl_User',
    tbl_Menu: 'tbl_Menu',
    tbl_detailTransaction: 'tbl_detailTransaction',
    tbl_detailOutlet: 'tbl_detailOutlet',
    tbl_Transaction: 'tbl_Transaction',
    tbl_log: 'tbl_log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Tbl_UserCountOutputType
   */


  export type Tbl_UserCountOutputType = {
    tbl_detailOutlet: number
    tbl_transaction: number
    tbl_Transaction: number
  }

  export type Tbl_UserCountOutputTypeSelect = {
    tbl_detailOutlet?: boolean
    tbl_transaction?: boolean
    tbl_Transaction?: boolean
  }

  export type Tbl_UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tbl_UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tbl_UserCountOutputType
    : S extends undefined
    ? never
    : S extends Tbl_UserCountOutputTypeArgs
    ?'include' extends U
    ? Tbl_UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tbl_UserCountOutputType ? Tbl_UserCountOutputType[P] : never
  } 
    : Tbl_UserCountOutputType
  : Tbl_UserCountOutputType




  // Custom InputTypes

  /**
   * Tbl_UserCountOutputType without action
   */
  export type Tbl_UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tbl_UserCountOutputType
     * 
    **/
    select?: Tbl_UserCountOutputTypeSelect | null
  }



  /**
   * Count Type Tbl_MenuCountOutputType
   */


  export type Tbl_MenuCountOutputType = {
    tbl_Transaction: number
  }

  export type Tbl_MenuCountOutputTypeSelect = {
    tbl_Transaction?: boolean
  }

  export type Tbl_MenuCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tbl_MenuCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tbl_MenuCountOutputType
    : S extends undefined
    ? never
    : S extends Tbl_MenuCountOutputTypeArgs
    ?'include' extends U
    ? Tbl_MenuCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tbl_MenuCountOutputType ? Tbl_MenuCountOutputType[P] : never
  } 
    : Tbl_MenuCountOutputType
  : Tbl_MenuCountOutputType




  // Custom InputTypes

  /**
   * Tbl_MenuCountOutputType without action
   */
  export type Tbl_MenuCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tbl_MenuCountOutputType
     * 
    **/
    select?: Tbl_MenuCountOutputTypeSelect | null
  }



  /**
   * Count Type Tbl_detailOutletCountOutputType
   */


  export type Tbl_detailOutletCountOutputType = {
    tbl_Transaction: number
  }

  export type Tbl_detailOutletCountOutputTypeSelect = {
    tbl_Transaction?: boolean
  }

  export type Tbl_detailOutletCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tbl_detailOutletCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tbl_detailOutletCountOutputType
    : S extends undefined
    ? never
    : S extends Tbl_detailOutletCountOutputTypeArgs
    ?'include' extends U
    ? Tbl_detailOutletCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tbl_detailOutletCountOutputType ? Tbl_detailOutletCountOutputType[P] : never
  } 
    : Tbl_detailOutletCountOutputType
  : Tbl_detailOutletCountOutputType




  // Custom InputTypes

  /**
   * Tbl_detailOutletCountOutputType without action
   */
  export type Tbl_detailOutletCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tbl_detailOutletCountOutputType
     * 
    **/
    select?: Tbl_detailOutletCountOutputTypeSelect | null
  }



  /**
   * Count Type Tbl_TransactionCountOutputType
   */


  export type Tbl_TransactionCountOutputType = {
    tbl_detailTransaction: number
  }

  export type Tbl_TransactionCountOutputTypeSelect = {
    tbl_detailTransaction?: boolean
  }

  export type Tbl_TransactionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tbl_TransactionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tbl_TransactionCountOutputType
    : S extends undefined
    ? never
    : S extends Tbl_TransactionCountOutputTypeArgs
    ?'include' extends U
    ? Tbl_TransactionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tbl_TransactionCountOutputType ? Tbl_TransactionCountOutputType[P] : never
  } 
    : Tbl_TransactionCountOutputType
  : Tbl_TransactionCountOutputType




  // Custom InputTypes

  /**
   * Tbl_TransactionCountOutputType without action
   */
  export type Tbl_TransactionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tbl_TransactionCountOutputType
     * 
    **/
    select?: Tbl_TransactionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model tbl_User
   */


  export type AggregateTbl_User = {
    _count: Tbl_UserCountAggregateOutputType | null
    _min: Tbl_UserMinAggregateOutputType | null
    _max: Tbl_UserMaxAggregateOutputType | null
  }

  export type Tbl_UserMinAggregateOutputType = {
    id: string | null
    Username: string | null
    Password: string | null
    noHp: string | null
    email: string | null
    Role: Role | null
  }

  export type Tbl_UserMaxAggregateOutputType = {
    id: string | null
    Username: string | null
    Password: string | null
    noHp: string | null
    email: string | null
    Role: Role | null
  }

  export type Tbl_UserCountAggregateOutputType = {
    id: number
    Username: number
    Password: number
    noHp: number
    email: number
    Role: number
    _all: number
  }


  export type Tbl_UserMinAggregateInputType = {
    id?: true
    Username?: true
    Password?: true
    noHp?: true
    email?: true
    Role?: true
  }

  export type Tbl_UserMaxAggregateInputType = {
    id?: true
    Username?: true
    Password?: true
    noHp?: true
    email?: true
    Role?: true
  }

  export type Tbl_UserCountAggregateInputType = {
    id?: true
    Username?: true
    Password?: true
    noHp?: true
    email?: true
    Role?: true
    _all?: true
  }

  export type Tbl_UserAggregateArgs = {
    /**
     * Filter which tbl_User to aggregate.
     * 
    **/
    where?: tbl_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_Users
    **/
    _count?: true | Tbl_UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_UserMaxAggregateInputType
  }

  export type GetTbl_UserAggregateType<T extends Tbl_UserAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_User]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_User[P]>
      : GetScalarType<T[P], AggregateTbl_User[P]>
  }




  export type Tbl_UserGroupByArgs = {
    where?: tbl_UserWhereInput
    orderBy?: Enumerable<tbl_UserOrderByWithAggregationInput>
    by: Array<Tbl_UserScalarFieldEnum>
    having?: tbl_UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_UserCountAggregateInputType | true
    _min?: Tbl_UserMinAggregateInputType
    _max?: Tbl_UserMaxAggregateInputType
  }


  export type Tbl_UserGroupByOutputType = {
    id: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role: Role
    _count: Tbl_UserCountAggregateOutputType | null
    _min: Tbl_UserMinAggregateOutputType | null
    _max: Tbl_UserMaxAggregateOutputType | null
  }

  type GetTbl_UserGroupByPayload<T extends Tbl_UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_UserGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_UserGroupByOutputType[P]>
        }
      >
    >


  export type tbl_UserSelect = {
    id?: boolean
    Username?: boolean
    Password?: boolean
    noHp?: boolean
    email?: boolean
    Role?: boolean
    tbl_detailOutlet?: boolean | tbl_detailOutletFindManyArgs
    tbl_transaction?: boolean | tbl_detailTransactionFindManyArgs
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_UserCountOutputTypeArgs
  }

  export type tbl_UserInclude = {
    tbl_detailOutlet?: boolean | tbl_detailOutletFindManyArgs
    tbl_transaction?: boolean | tbl_detailTransactionFindManyArgs
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_UserCountOutputTypeArgs
  }

  export type tbl_UserGetPayload<
    S extends boolean | null | undefined | tbl_UserArgs,
    U = keyof S
      > = S extends true
        ? tbl_User
    : S extends undefined
    ? never
    : S extends tbl_UserArgs | tbl_UserFindManyArgs
    ?'include' extends U
    ? tbl_User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_detailOutlet' ? Array < tbl_detailOutletGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'tbl_transaction' ? Array < tbl_detailTransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_detailOutlet' ? Array < tbl_detailOutletGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'tbl_transaction' ? Array < tbl_detailTransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof tbl_User ? tbl_User[P] : never
  } 
    : tbl_User
  : tbl_User


  type tbl_UserCountArgs = Merge<
    Omit<tbl_UserFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_UserCountAggregateInputType | true
    }
  >

  export interface tbl_UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_User that matches the filter.
     * @param {tbl_UserFindUniqueArgs} args - Arguments to find a Tbl_User
     * @example
     * // Get one Tbl_User
     * const tbl_User = await prisma.tbl_User.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_User'> extends True ? CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>> : CheckSelect<T, Prisma__tbl_UserClient<tbl_User | null, null>, Prisma__tbl_UserClient<tbl_UserGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_UserFindFirstArgs} args - Arguments to find a Tbl_User
     * @example
     * // Get one Tbl_User
     * const tbl_User = await prisma.tbl_User.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_User'> extends True ? CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>> : CheckSelect<T, Prisma__tbl_UserClient<tbl_User | null, null>, Prisma__tbl_UserClient<tbl_UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_Users
     * const tbl_Users = await prisma.tbl_User.findMany()
     * 
     * // Get first 10 Tbl_Users
     * const tbl_Users = await prisma.tbl_User.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_UserWithIdOnly = await prisma.tbl_User.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_UserFindManyArgs>(
      args?: SelectSubset<T, tbl_UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_User>>, PrismaPromise<Array<tbl_UserGetPayload<T>>>>

    /**
     * Create a Tbl_User.
     * @param {tbl_UserCreateArgs} args - Arguments to create a Tbl_User.
     * @example
     * // Create one Tbl_User
     * const Tbl_User = await prisma.tbl_User.create({
     *   data: {
     *     // ... data to create a Tbl_User
     *   }
     * })
     * 
    **/
    create<T extends tbl_UserCreateArgs>(
      args: SelectSubset<T, tbl_UserCreateArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Create many Tbl_Users.
     *     @param {tbl_UserCreateManyArgs} args - Arguments to create many Tbl_Users.
     *     @example
     *     // Create many Tbl_Users
     *     const tbl_User = await prisma.tbl_User.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_UserCreateManyArgs>(
      args?: SelectSubset<T, tbl_UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_User.
     * @param {tbl_UserDeleteArgs} args - Arguments to delete one Tbl_User.
     * @example
     * // Delete one Tbl_User
     * const Tbl_User = await prisma.tbl_User.delete({
     *   where: {
     *     // ... filter to delete one Tbl_User
     *   }
     * })
     * 
    **/
    delete<T extends tbl_UserDeleteArgs>(
      args: SelectSubset<T, tbl_UserDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Update one Tbl_User.
     * @param {tbl_UserUpdateArgs} args - Arguments to update one Tbl_User.
     * @example
     * // Update one Tbl_User
     * const tbl_User = await prisma.tbl_User.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_UserUpdateArgs>(
      args: SelectSubset<T, tbl_UserUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Delete zero or more Tbl_Users.
     * @param {tbl_UserDeleteManyArgs} args - Arguments to filter Tbl_Users to delete.
     * @example
     * // Delete a few Tbl_Users
     * const { count } = await prisma.tbl_User.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_UserDeleteManyArgs>(
      args?: SelectSubset<T, tbl_UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_Users
     * const tbl_User = await prisma.tbl_User.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_UserUpdateManyArgs>(
      args: SelectSubset<T, tbl_UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_User.
     * @param {tbl_UserUpsertArgs} args - Arguments to update or create a Tbl_User.
     * @example
     * // Update or create a Tbl_User
     * const tbl_User = await prisma.tbl_User.upsert({
     *   create: {
     *     // ... data to create a Tbl_User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_User we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_UserUpsertArgs>(
      args: SelectSubset<T, tbl_UserUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Find one Tbl_User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_UserFindUniqueOrThrowArgs} args - Arguments to find a Tbl_User
     * @example
     * // Get one Tbl_User
     * const tbl_User = await prisma.tbl_User.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Find the first Tbl_User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_UserFindFirstOrThrowArgs} args - Arguments to find a Tbl_User
     * @example
     * // Get one Tbl_User
     * const tbl_User = await prisma.tbl_User.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_UserClient<tbl_User>, Prisma__tbl_UserClient<tbl_UserGetPayload<T>>>

    /**
     * Count the number of Tbl_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_UserCountArgs} args - Arguments to filter Tbl_Users to count.
     * @example
     * // Count the number of Tbl_Users
     * const count = await prisma.tbl_User.count({
     *   where: {
     *     // ... the filter for the Tbl_Users we want to count
     *   }
     * })
    **/
    count<T extends tbl_UserCountArgs>(
      args?: Subset<T, tbl_UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_UserAggregateArgs>(args: Subset<T, Tbl_UserAggregateArgs>): PrismaPromise<GetTbl_UserAggregateType<T>>

    /**
     * Group by Tbl_User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_UserGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_UserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_detailOutlet<T extends tbl_detailOutletFindManyArgs = {}>(args?: Subset<T, tbl_detailOutletFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_detailOutlet>| Null>, PrismaPromise<Array<tbl_detailOutletGetPayload<T>>| Null>>;

    tbl_transaction<T extends tbl_detailTransactionFindManyArgs = {}>(args?: Subset<T, tbl_detailTransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_detailTransaction>| Null>, PrismaPromise<Array<tbl_detailTransactionGetPayload<T>>| Null>>;

    tbl_Transaction<T extends tbl_TransactionFindManyArgs = {}>(args?: Subset<T, tbl_TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_Transaction>| Null>, PrismaPromise<Array<tbl_TransactionGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_User base type for findUnique actions
   */
  export type tbl_UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * Filter, which tbl_User to fetch.
     * 
    **/
    where: tbl_UserWhereUniqueInput
  }

  /**
   * tbl_User: findUnique
   */
  export interface tbl_UserFindUniqueArgs extends tbl_UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_User base type for findFirst actions
   */
  export type tbl_UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * Filter, which tbl_User to fetch.
     * 
    **/
    where?: tbl_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_Users.
     * 
    **/
    cursor?: tbl_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_Users.
     * 
    **/
    distinct?: Enumerable<Tbl_UserScalarFieldEnum>
  }

  /**
   * tbl_User: findFirst
   */
  export interface tbl_UserFindFirstArgs extends tbl_UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_User findMany
   */
  export type tbl_UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * Filter, which tbl_Users to fetch.
     * 
    **/
    where?: tbl_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_Users.
     * 
    **/
    cursor?: tbl_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_UserScalarFieldEnum>
  }


  /**
   * tbl_User create
   */
  export type tbl_UserCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * The data needed to create a tbl_User.
     * 
    **/
    data: XOR<tbl_UserCreateInput, tbl_UserUncheckedCreateInput>
  }


  /**
   * tbl_User createMany
   */
  export type tbl_UserCreateManyArgs = {
    /**
     * The data used to create many tbl_Users.
     * 
    **/
    data: Enumerable<tbl_UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_User update
   */
  export type tbl_UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * The data needed to update a tbl_User.
     * 
    **/
    data: XOR<tbl_UserUpdateInput, tbl_UserUncheckedUpdateInput>
    /**
     * Choose, which tbl_User to update.
     * 
    **/
    where: tbl_UserWhereUniqueInput
  }


  /**
   * tbl_User updateMany
   */
  export type tbl_UserUpdateManyArgs = {
    /**
     * The data used to update tbl_Users.
     * 
    **/
    data: XOR<tbl_UserUpdateManyMutationInput, tbl_UserUncheckedUpdateManyInput>
    /**
     * Filter which tbl_Users to update
     * 
    **/
    where?: tbl_UserWhereInput
  }


  /**
   * tbl_User upsert
   */
  export type tbl_UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * The filter to search for the tbl_User to update in case it exists.
     * 
    **/
    where: tbl_UserWhereUniqueInput
    /**
     * In case the tbl_User found by the `where` argument doesn't exist, create a new tbl_User with this data.
     * 
    **/
    create: XOR<tbl_UserCreateInput, tbl_UserUncheckedCreateInput>
    /**
     * In case the tbl_User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_UserUpdateInput, tbl_UserUncheckedUpdateInput>
  }


  /**
   * tbl_User delete
   */
  export type tbl_UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
    /**
     * Filter which tbl_User to delete.
     * 
    **/
    where: tbl_UserWhereUniqueInput
  }


  /**
   * tbl_User deleteMany
   */
  export type tbl_UserDeleteManyArgs = {
    /**
     * Filter which tbl_Users to delete
     * 
    **/
    where?: tbl_UserWhereInput
  }


  /**
   * tbl_User: findUniqueOrThrow
   */
  export type tbl_UserFindUniqueOrThrowArgs = tbl_UserFindUniqueArgsBase
      

  /**
   * tbl_User: findFirstOrThrow
   */
  export type tbl_UserFindFirstOrThrowArgs = tbl_UserFindFirstArgsBase
      

  /**
   * tbl_User without action
   */
  export type tbl_UserArgs = {
    /**
     * Select specific fields to fetch from the tbl_User
     * 
    **/
    select?: tbl_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_UserInclude | null
  }



  /**
   * Model tbl_Menu
   */


  export type AggregateTbl_Menu = {
    _count: Tbl_MenuCountAggregateOutputType | null
    _avg: Tbl_MenuAvgAggregateOutputType | null
    _sum: Tbl_MenuSumAggregateOutputType | null
    _min: Tbl_MenuMinAggregateOutputType | null
    _max: Tbl_MenuMaxAggregateOutputType | null
  }

  export type Tbl_MenuAvgAggregateOutputType = {
    priceMenu: number | null
  }

  export type Tbl_MenuSumAggregateOutputType = {
    priceMenu: number | null
  }

  export type Tbl_MenuMinAggregateOutputType = {
    id: string | null
    nameMenu: string | null
    priceMenu: number | null
    descMenu: string | null
  }

  export type Tbl_MenuMaxAggregateOutputType = {
    id: string | null
    nameMenu: string | null
    priceMenu: number | null
    descMenu: string | null
  }

  export type Tbl_MenuCountAggregateOutputType = {
    id: number
    nameMenu: number
    priceMenu: number
    descMenu: number
    _all: number
  }


  export type Tbl_MenuAvgAggregateInputType = {
    priceMenu?: true
  }

  export type Tbl_MenuSumAggregateInputType = {
    priceMenu?: true
  }

  export type Tbl_MenuMinAggregateInputType = {
    id?: true
    nameMenu?: true
    priceMenu?: true
    descMenu?: true
  }

  export type Tbl_MenuMaxAggregateInputType = {
    id?: true
    nameMenu?: true
    priceMenu?: true
    descMenu?: true
  }

  export type Tbl_MenuCountAggregateInputType = {
    id?: true
    nameMenu?: true
    priceMenu?: true
    descMenu?: true
    _all?: true
  }

  export type Tbl_MenuAggregateArgs = {
    /**
     * Filter which tbl_Menu to aggregate.
     * 
    **/
    where?: tbl_MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_MenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_Menus
    **/
    _count?: true | Tbl_MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_MenuMaxAggregateInputType
  }

  export type GetTbl_MenuAggregateType<T extends Tbl_MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_Menu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_Menu[P]>
      : GetScalarType<T[P], AggregateTbl_Menu[P]>
  }




  export type Tbl_MenuGroupByArgs = {
    where?: tbl_MenuWhereInput
    orderBy?: Enumerable<tbl_MenuOrderByWithAggregationInput>
    by: Array<Tbl_MenuScalarFieldEnum>
    having?: tbl_MenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_MenuCountAggregateInputType | true
    _avg?: Tbl_MenuAvgAggregateInputType
    _sum?: Tbl_MenuSumAggregateInputType
    _min?: Tbl_MenuMinAggregateInputType
    _max?: Tbl_MenuMaxAggregateInputType
  }


  export type Tbl_MenuGroupByOutputType = {
    id: string
    nameMenu: string
    priceMenu: number
    descMenu: string
    _count: Tbl_MenuCountAggregateOutputType | null
    _avg: Tbl_MenuAvgAggregateOutputType | null
    _sum: Tbl_MenuSumAggregateOutputType | null
    _min: Tbl_MenuMinAggregateOutputType | null
    _max: Tbl_MenuMaxAggregateOutputType | null
  }

  type GetTbl_MenuGroupByPayload<T extends Tbl_MenuGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_MenuGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_MenuGroupByOutputType[P]>
        }
      >
    >


  export type tbl_MenuSelect = {
    id?: boolean
    nameMenu?: boolean
    priceMenu?: boolean
    descMenu?: boolean
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_MenuCountOutputTypeArgs
  }

  export type tbl_MenuInclude = {
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_MenuCountOutputTypeArgs
  }

  export type tbl_MenuGetPayload<
    S extends boolean | null | undefined | tbl_MenuArgs,
    U = keyof S
      > = S extends true
        ? tbl_Menu
    : S extends undefined
    ? never
    : S extends tbl_MenuArgs | tbl_MenuFindManyArgs
    ?'include' extends U
    ? tbl_Menu  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_MenuCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_MenuCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof tbl_Menu ? tbl_Menu[P] : never
  } 
    : tbl_Menu
  : tbl_Menu


  type tbl_MenuCountArgs = Merge<
    Omit<tbl_MenuFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_MenuCountAggregateInputType | true
    }
  >

  export interface tbl_MenuDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_Menu that matches the filter.
     * @param {tbl_MenuFindUniqueArgs} args - Arguments to find a Tbl_Menu
     * @example
     * // Get one Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_MenuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_MenuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_Menu'> extends True ? CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>> : CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu | null, null>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_MenuFindFirstArgs} args - Arguments to find a Tbl_Menu
     * @example
     * // Get one Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_MenuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_MenuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_Menu'> extends True ? CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>> : CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu | null, null>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_MenuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_Menus
     * const tbl_Menus = await prisma.tbl_Menu.findMany()
     * 
     * // Get first 10 Tbl_Menus
     * const tbl_Menus = await prisma.tbl_Menu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_MenuWithIdOnly = await prisma.tbl_Menu.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_MenuFindManyArgs>(
      args?: SelectSubset<T, tbl_MenuFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_Menu>>, PrismaPromise<Array<tbl_MenuGetPayload<T>>>>

    /**
     * Create a Tbl_Menu.
     * @param {tbl_MenuCreateArgs} args - Arguments to create a Tbl_Menu.
     * @example
     * // Create one Tbl_Menu
     * const Tbl_Menu = await prisma.tbl_Menu.create({
     *   data: {
     *     // ... data to create a Tbl_Menu
     *   }
     * })
     * 
    **/
    create<T extends tbl_MenuCreateArgs>(
      args: SelectSubset<T, tbl_MenuCreateArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Create many Tbl_Menus.
     *     @param {tbl_MenuCreateManyArgs} args - Arguments to create many Tbl_Menus.
     *     @example
     *     // Create many Tbl_Menus
     *     const tbl_Menu = await prisma.tbl_Menu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_MenuCreateManyArgs>(
      args?: SelectSubset<T, tbl_MenuCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_Menu.
     * @param {tbl_MenuDeleteArgs} args - Arguments to delete one Tbl_Menu.
     * @example
     * // Delete one Tbl_Menu
     * const Tbl_Menu = await prisma.tbl_Menu.delete({
     *   where: {
     *     // ... filter to delete one Tbl_Menu
     *   }
     * })
     * 
    **/
    delete<T extends tbl_MenuDeleteArgs>(
      args: SelectSubset<T, tbl_MenuDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Update one Tbl_Menu.
     * @param {tbl_MenuUpdateArgs} args - Arguments to update one Tbl_Menu.
     * @example
     * // Update one Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_MenuUpdateArgs>(
      args: SelectSubset<T, tbl_MenuUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Delete zero or more Tbl_Menus.
     * @param {tbl_MenuDeleteManyArgs} args - Arguments to filter Tbl_Menus to delete.
     * @example
     * // Delete a few Tbl_Menus
     * const { count } = await prisma.tbl_Menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_MenuDeleteManyArgs>(
      args?: SelectSubset<T, tbl_MenuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_MenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_Menus
     * const tbl_Menu = await prisma.tbl_Menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_MenuUpdateManyArgs>(
      args: SelectSubset<T, tbl_MenuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_Menu.
     * @param {tbl_MenuUpsertArgs} args - Arguments to update or create a Tbl_Menu.
     * @example
     * // Update or create a Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.upsert({
     *   create: {
     *     // ... data to create a Tbl_Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_Menu we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_MenuUpsertArgs>(
      args: SelectSubset<T, tbl_MenuUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Find one Tbl_Menu that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_MenuFindUniqueOrThrowArgs} args - Arguments to find a Tbl_Menu
     * @example
     * // Get one Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_MenuFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_MenuFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Find the first Tbl_Menu that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_MenuFindFirstOrThrowArgs} args - Arguments to find a Tbl_Menu
     * @example
     * // Get one Tbl_Menu
     * const tbl_Menu = await prisma.tbl_Menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_MenuFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_MenuFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T>>>

    /**
     * Count the number of Tbl_Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_MenuCountArgs} args - Arguments to filter Tbl_Menus to count.
     * @example
     * // Count the number of Tbl_Menus
     * const count = await prisma.tbl_Menu.count({
     *   where: {
     *     // ... the filter for the Tbl_Menus we want to count
     *   }
     * })
    **/
    count<T extends tbl_MenuCountArgs>(
      args?: Subset<T, tbl_MenuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_MenuAggregateArgs>(args: Subset<T, Tbl_MenuAggregateArgs>): PrismaPromise<GetTbl_MenuAggregateType<T>>

    /**
     * Group by Tbl_Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_MenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_MenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_MenuGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_MenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_MenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_MenuGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_Menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_MenuClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_Transaction<T extends tbl_TransactionFindManyArgs = {}>(args?: Subset<T, tbl_TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_Transaction>| Null>, PrismaPromise<Array<tbl_TransactionGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_Menu base type for findUnique actions
   */
  export type tbl_MenuFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * Filter, which tbl_Menu to fetch.
     * 
    **/
    where: tbl_MenuWhereUniqueInput
  }

  /**
   * tbl_Menu: findUnique
   */
  export interface tbl_MenuFindUniqueArgs extends tbl_MenuFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_Menu base type for findFirst actions
   */
  export type tbl_MenuFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * Filter, which tbl_Menu to fetch.
     * 
    **/
    where?: tbl_MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_MenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_Menus.
     * 
    **/
    cursor?: tbl_MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_Menus.
     * 
    **/
    distinct?: Enumerable<Tbl_MenuScalarFieldEnum>
  }

  /**
   * tbl_Menu: findFirst
   */
  export interface tbl_MenuFindFirstArgs extends tbl_MenuFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_Menu findMany
   */
  export type tbl_MenuFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * Filter, which tbl_Menus to fetch.
     * 
    **/
    where?: tbl_MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_MenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_Menus.
     * 
    **/
    cursor?: tbl_MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Menus.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_MenuScalarFieldEnum>
  }


  /**
   * tbl_Menu create
   */
  export type tbl_MenuCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * The data needed to create a tbl_Menu.
     * 
    **/
    data: XOR<tbl_MenuCreateInput, tbl_MenuUncheckedCreateInput>
  }


  /**
   * tbl_Menu createMany
   */
  export type tbl_MenuCreateManyArgs = {
    /**
     * The data used to create many tbl_Menus.
     * 
    **/
    data: Enumerable<tbl_MenuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_Menu update
   */
  export type tbl_MenuUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * The data needed to update a tbl_Menu.
     * 
    **/
    data: XOR<tbl_MenuUpdateInput, tbl_MenuUncheckedUpdateInput>
    /**
     * Choose, which tbl_Menu to update.
     * 
    **/
    where: tbl_MenuWhereUniqueInput
  }


  /**
   * tbl_Menu updateMany
   */
  export type tbl_MenuUpdateManyArgs = {
    /**
     * The data used to update tbl_Menus.
     * 
    **/
    data: XOR<tbl_MenuUpdateManyMutationInput, tbl_MenuUncheckedUpdateManyInput>
    /**
     * Filter which tbl_Menus to update
     * 
    **/
    where?: tbl_MenuWhereInput
  }


  /**
   * tbl_Menu upsert
   */
  export type tbl_MenuUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * The filter to search for the tbl_Menu to update in case it exists.
     * 
    **/
    where: tbl_MenuWhereUniqueInput
    /**
     * In case the tbl_Menu found by the `where` argument doesn't exist, create a new tbl_Menu with this data.
     * 
    **/
    create: XOR<tbl_MenuCreateInput, tbl_MenuUncheckedCreateInput>
    /**
     * In case the tbl_Menu was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_MenuUpdateInput, tbl_MenuUncheckedUpdateInput>
  }


  /**
   * tbl_Menu delete
   */
  export type tbl_MenuDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
    /**
     * Filter which tbl_Menu to delete.
     * 
    **/
    where: tbl_MenuWhereUniqueInput
  }


  /**
   * tbl_Menu deleteMany
   */
  export type tbl_MenuDeleteManyArgs = {
    /**
     * Filter which tbl_Menus to delete
     * 
    **/
    where?: tbl_MenuWhereInput
  }


  /**
   * tbl_Menu: findUniqueOrThrow
   */
  export type tbl_MenuFindUniqueOrThrowArgs = tbl_MenuFindUniqueArgsBase
      

  /**
   * tbl_Menu: findFirstOrThrow
   */
  export type tbl_MenuFindFirstOrThrowArgs = tbl_MenuFindFirstArgsBase
      

  /**
   * tbl_Menu without action
   */
  export type tbl_MenuArgs = {
    /**
     * Select specific fields to fetch from the tbl_Menu
     * 
    **/
    select?: tbl_MenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_MenuInclude | null
  }



  /**
   * Model tbl_detailTransaction
   */


  export type AggregateTbl_detailTransaction = {
    _count: Tbl_detailTransactionCountAggregateOutputType | null
    _avg: Tbl_detailTransactionAvgAggregateOutputType | null
    _sum: Tbl_detailTransactionSumAggregateOutputType | null
    _min: Tbl_detailTransactionMinAggregateOutputType | null
    _max: Tbl_detailTransactionMaxAggregateOutputType | null
  }

  export type Tbl_detailTransactionAvgAggregateOutputType = {
    total: number | null
  }

  export type Tbl_detailTransactionSumAggregateOutputType = {
    total: number | null
  }

  export type Tbl_detailTransactionMinAggregateOutputType = {
    id: string | null
    idTransaction: string | null
    total: number | null
    tbl_UserId: string | null
  }

  export type Tbl_detailTransactionMaxAggregateOutputType = {
    id: string | null
    idTransaction: string | null
    total: number | null
    tbl_UserId: string | null
  }

  export type Tbl_detailTransactionCountAggregateOutputType = {
    id: number
    idTransaction: number
    total: number
    tbl_UserId: number
    _all: number
  }


  export type Tbl_detailTransactionAvgAggregateInputType = {
    total?: true
  }

  export type Tbl_detailTransactionSumAggregateInputType = {
    total?: true
  }

  export type Tbl_detailTransactionMinAggregateInputType = {
    id?: true
    idTransaction?: true
    total?: true
    tbl_UserId?: true
  }

  export type Tbl_detailTransactionMaxAggregateInputType = {
    id?: true
    idTransaction?: true
    total?: true
    tbl_UserId?: true
  }

  export type Tbl_detailTransactionCountAggregateInputType = {
    id?: true
    idTransaction?: true
    total?: true
    tbl_UserId?: true
    _all?: true
  }

  export type Tbl_detailTransactionAggregateArgs = {
    /**
     * Filter which tbl_detailTransaction to aggregate.
     * 
    **/
    where?: tbl_detailTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_detailTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailTransactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_detailTransactions
    **/
    _count?: true | Tbl_detailTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_detailTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_detailTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_detailTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_detailTransactionMaxAggregateInputType
  }

  export type GetTbl_detailTransactionAggregateType<T extends Tbl_detailTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_detailTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_detailTransaction[P]>
      : GetScalarType<T[P], AggregateTbl_detailTransaction[P]>
  }




  export type Tbl_detailTransactionGroupByArgs = {
    where?: tbl_detailTransactionWhereInput
    orderBy?: Enumerable<tbl_detailTransactionOrderByWithAggregationInput>
    by: Array<Tbl_detailTransactionScalarFieldEnum>
    having?: tbl_detailTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_detailTransactionCountAggregateInputType | true
    _avg?: Tbl_detailTransactionAvgAggregateInputType
    _sum?: Tbl_detailTransactionSumAggregateInputType
    _min?: Tbl_detailTransactionMinAggregateInputType
    _max?: Tbl_detailTransactionMaxAggregateInputType
  }


  export type Tbl_detailTransactionGroupByOutputType = {
    id: string
    idTransaction: string
    total: number
    tbl_UserId: string | null
    _count: Tbl_detailTransactionCountAggregateOutputType | null
    _avg: Tbl_detailTransactionAvgAggregateOutputType | null
    _sum: Tbl_detailTransactionSumAggregateOutputType | null
    _min: Tbl_detailTransactionMinAggregateOutputType | null
    _max: Tbl_detailTransactionMaxAggregateOutputType | null
  }

  type GetTbl_detailTransactionGroupByPayload<T extends Tbl_detailTransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_detailTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_detailTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_detailTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_detailTransactionGroupByOutputType[P]>
        }
      >
    >


  export type tbl_detailTransactionSelect = {
    id?: boolean
    tbl_Transaction?: boolean | tbl_TransactionArgs
    idTransaction?: boolean
    total?: boolean
    tbl_User?: boolean | tbl_UserArgs
    tbl_UserId?: boolean
  }

  export type tbl_detailTransactionInclude = {
    tbl_Transaction?: boolean | tbl_TransactionArgs
    tbl_User?: boolean | tbl_UserArgs
  }

  export type tbl_detailTransactionGetPayload<
    S extends boolean | null | undefined | tbl_detailTransactionArgs,
    U = keyof S
      > = S extends true
        ? tbl_detailTransaction
    : S extends undefined
    ? never
    : S extends tbl_detailTransactionArgs | tbl_detailTransactionFindManyArgs
    ?'include' extends U
    ? tbl_detailTransaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_Transaction' ? tbl_TransactionGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'tbl_User' ? tbl_UserGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_Transaction' ? tbl_TransactionGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'tbl_User' ? tbl_UserGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof tbl_detailTransaction ? tbl_detailTransaction[P] : never
  } 
    : tbl_detailTransaction
  : tbl_detailTransaction


  type tbl_detailTransactionCountArgs = Merge<
    Omit<tbl_detailTransactionFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_detailTransactionCountAggregateInputType | true
    }
  >

  export interface tbl_detailTransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_detailTransaction that matches the filter.
     * @param {tbl_detailTransactionFindUniqueArgs} args - Arguments to find a Tbl_detailTransaction
     * @example
     * // Get one Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_detailTransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_detailTransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_detailTransaction'> extends True ? CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>> : CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction | null, null>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_detailTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailTransactionFindFirstArgs} args - Arguments to find a Tbl_detailTransaction
     * @example
     * // Get one Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_detailTransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_detailTransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_detailTransaction'> extends True ? CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>> : CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction | null, null>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_detailTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailTransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_detailTransactions
     * const tbl_detailTransactions = await prisma.tbl_detailTransaction.findMany()
     * 
     * // Get first 10 Tbl_detailTransactions
     * const tbl_detailTransactions = await prisma.tbl_detailTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_detailTransactionWithIdOnly = await prisma.tbl_detailTransaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_detailTransactionFindManyArgs>(
      args?: SelectSubset<T, tbl_detailTransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_detailTransaction>>, PrismaPromise<Array<tbl_detailTransactionGetPayload<T>>>>

    /**
     * Create a Tbl_detailTransaction.
     * @param {tbl_detailTransactionCreateArgs} args - Arguments to create a Tbl_detailTransaction.
     * @example
     * // Create one Tbl_detailTransaction
     * const Tbl_detailTransaction = await prisma.tbl_detailTransaction.create({
     *   data: {
     *     // ... data to create a Tbl_detailTransaction
     *   }
     * })
     * 
    **/
    create<T extends tbl_detailTransactionCreateArgs>(
      args: SelectSubset<T, tbl_detailTransactionCreateArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Create many Tbl_detailTransactions.
     *     @param {tbl_detailTransactionCreateManyArgs} args - Arguments to create many Tbl_detailTransactions.
     *     @example
     *     // Create many Tbl_detailTransactions
     *     const tbl_detailTransaction = await prisma.tbl_detailTransaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_detailTransactionCreateManyArgs>(
      args?: SelectSubset<T, tbl_detailTransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_detailTransaction.
     * @param {tbl_detailTransactionDeleteArgs} args - Arguments to delete one Tbl_detailTransaction.
     * @example
     * // Delete one Tbl_detailTransaction
     * const Tbl_detailTransaction = await prisma.tbl_detailTransaction.delete({
     *   where: {
     *     // ... filter to delete one Tbl_detailTransaction
     *   }
     * })
     * 
    **/
    delete<T extends tbl_detailTransactionDeleteArgs>(
      args: SelectSubset<T, tbl_detailTransactionDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Update one Tbl_detailTransaction.
     * @param {tbl_detailTransactionUpdateArgs} args - Arguments to update one Tbl_detailTransaction.
     * @example
     * // Update one Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_detailTransactionUpdateArgs>(
      args: SelectSubset<T, tbl_detailTransactionUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Delete zero or more Tbl_detailTransactions.
     * @param {tbl_detailTransactionDeleteManyArgs} args - Arguments to filter Tbl_detailTransactions to delete.
     * @example
     * // Delete a few Tbl_detailTransactions
     * const { count } = await prisma.tbl_detailTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_detailTransactionDeleteManyArgs>(
      args?: SelectSubset<T, tbl_detailTransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_detailTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_detailTransactions
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_detailTransactionUpdateManyArgs>(
      args: SelectSubset<T, tbl_detailTransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_detailTransaction.
     * @param {tbl_detailTransactionUpsertArgs} args - Arguments to update or create a Tbl_detailTransaction.
     * @example
     * // Update or create a Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.upsert({
     *   create: {
     *     // ... data to create a Tbl_detailTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_detailTransaction we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_detailTransactionUpsertArgs>(
      args: SelectSubset<T, tbl_detailTransactionUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Find one Tbl_detailTransaction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_detailTransactionFindUniqueOrThrowArgs} args - Arguments to find a Tbl_detailTransaction
     * @example
     * // Get one Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_detailTransactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_detailTransactionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Find the first Tbl_detailTransaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailTransactionFindFirstOrThrowArgs} args - Arguments to find a Tbl_detailTransaction
     * @example
     * // Get one Tbl_detailTransaction
     * const tbl_detailTransaction = await prisma.tbl_detailTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_detailTransactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_detailTransactionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_detailTransactionClient<tbl_detailTransaction>, Prisma__tbl_detailTransactionClient<tbl_detailTransactionGetPayload<T>>>

    /**
     * Count the number of Tbl_detailTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailTransactionCountArgs} args - Arguments to filter Tbl_detailTransactions to count.
     * @example
     * // Count the number of Tbl_detailTransactions
     * const count = await prisma.tbl_detailTransaction.count({
     *   where: {
     *     // ... the filter for the Tbl_detailTransactions we want to count
     *   }
     * })
    **/
    count<T extends tbl_detailTransactionCountArgs>(
      args?: Subset<T, tbl_detailTransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_detailTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_detailTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_detailTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_detailTransactionAggregateArgs>(args: Subset<T, Tbl_detailTransactionAggregateArgs>): PrismaPromise<GetTbl_detailTransactionAggregateType<T>>

    /**
     * Group by Tbl_detailTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_detailTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_detailTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_detailTransactionGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_detailTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_detailTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_detailTransactionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_detailTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_detailTransactionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_Transaction<T extends tbl_TransactionArgs = {}>(args?: Subset<T, tbl_TransactionArgs>): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction | Null>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T> | Null>>;

    tbl_User<T extends tbl_UserArgs = {}>(args?: Subset<T, tbl_UserArgs>): CheckSelect<T, Prisma__tbl_UserClient<tbl_User | Null>, Prisma__tbl_UserClient<tbl_UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_detailTransaction base type for findUnique actions
   */
  export type tbl_detailTransactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * Filter, which tbl_detailTransaction to fetch.
     * 
    **/
    where: tbl_detailTransactionWhereUniqueInput
  }

  /**
   * tbl_detailTransaction: findUnique
   */
  export interface tbl_detailTransactionFindUniqueArgs extends tbl_detailTransactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_detailTransaction base type for findFirst actions
   */
  export type tbl_detailTransactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * Filter, which tbl_detailTransaction to fetch.
     * 
    **/
    where?: tbl_detailTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_detailTransactions.
     * 
    **/
    cursor?: tbl_detailTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailTransactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_detailTransactions.
     * 
    **/
    distinct?: Enumerable<Tbl_detailTransactionScalarFieldEnum>
  }

  /**
   * tbl_detailTransaction: findFirst
   */
  export interface tbl_detailTransactionFindFirstArgs extends tbl_detailTransactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_detailTransaction findMany
   */
  export type tbl_detailTransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * Filter, which tbl_detailTransactions to fetch.
     * 
    **/
    where?: tbl_detailTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailTransactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailTransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_detailTransactions.
     * 
    **/
    cursor?: tbl_detailTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailTransactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailTransactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_detailTransactionScalarFieldEnum>
  }


  /**
   * tbl_detailTransaction create
   */
  export type tbl_detailTransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * The data needed to create a tbl_detailTransaction.
     * 
    **/
    data: XOR<tbl_detailTransactionCreateInput, tbl_detailTransactionUncheckedCreateInput>
  }


  /**
   * tbl_detailTransaction createMany
   */
  export type tbl_detailTransactionCreateManyArgs = {
    /**
     * The data used to create many tbl_detailTransactions.
     * 
    **/
    data: Enumerable<tbl_detailTransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_detailTransaction update
   */
  export type tbl_detailTransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * The data needed to update a tbl_detailTransaction.
     * 
    **/
    data: XOR<tbl_detailTransactionUpdateInput, tbl_detailTransactionUncheckedUpdateInput>
    /**
     * Choose, which tbl_detailTransaction to update.
     * 
    **/
    where: tbl_detailTransactionWhereUniqueInput
  }


  /**
   * tbl_detailTransaction updateMany
   */
  export type tbl_detailTransactionUpdateManyArgs = {
    /**
     * The data used to update tbl_detailTransactions.
     * 
    **/
    data: XOR<tbl_detailTransactionUpdateManyMutationInput, tbl_detailTransactionUncheckedUpdateManyInput>
    /**
     * Filter which tbl_detailTransactions to update
     * 
    **/
    where?: tbl_detailTransactionWhereInput
  }


  /**
   * tbl_detailTransaction upsert
   */
  export type tbl_detailTransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * The filter to search for the tbl_detailTransaction to update in case it exists.
     * 
    **/
    where: tbl_detailTransactionWhereUniqueInput
    /**
     * In case the tbl_detailTransaction found by the `where` argument doesn't exist, create a new tbl_detailTransaction with this data.
     * 
    **/
    create: XOR<tbl_detailTransactionCreateInput, tbl_detailTransactionUncheckedCreateInput>
    /**
     * In case the tbl_detailTransaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_detailTransactionUpdateInput, tbl_detailTransactionUncheckedUpdateInput>
  }


  /**
   * tbl_detailTransaction delete
   */
  export type tbl_detailTransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
    /**
     * Filter which tbl_detailTransaction to delete.
     * 
    **/
    where: tbl_detailTransactionWhereUniqueInput
  }


  /**
   * tbl_detailTransaction deleteMany
   */
  export type tbl_detailTransactionDeleteManyArgs = {
    /**
     * Filter which tbl_detailTransactions to delete
     * 
    **/
    where?: tbl_detailTransactionWhereInput
  }


  /**
   * tbl_detailTransaction: findUniqueOrThrow
   */
  export type tbl_detailTransactionFindUniqueOrThrowArgs = tbl_detailTransactionFindUniqueArgsBase
      

  /**
   * tbl_detailTransaction: findFirstOrThrow
   */
  export type tbl_detailTransactionFindFirstOrThrowArgs = tbl_detailTransactionFindFirstArgsBase
      

  /**
   * tbl_detailTransaction without action
   */
  export type tbl_detailTransactionArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailTransaction
     * 
    **/
    select?: tbl_detailTransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailTransactionInclude | null
  }



  /**
   * Model tbl_detailOutlet
   */


  export type AggregateTbl_detailOutlet = {
    _count: Tbl_detailOutletCountAggregateOutputType | null
    _min: Tbl_detailOutletMinAggregateOutputType | null
    _max: Tbl_detailOutletMaxAggregateOutputType | null
  }

  export type Tbl_detailOutletMinAggregateOutputType = {
    id: string | null
    idUser: string | null
    alamatOutlet: string | null
    Status: string | null
  }

  export type Tbl_detailOutletMaxAggregateOutputType = {
    id: string | null
    idUser: string | null
    alamatOutlet: string | null
    Status: string | null
  }

  export type Tbl_detailOutletCountAggregateOutputType = {
    id: number
    idUser: number
    alamatOutlet: number
    Status: number
    _all: number
  }


  export type Tbl_detailOutletMinAggregateInputType = {
    id?: true
    idUser?: true
    alamatOutlet?: true
    Status?: true
  }

  export type Tbl_detailOutletMaxAggregateInputType = {
    id?: true
    idUser?: true
    alamatOutlet?: true
    Status?: true
  }

  export type Tbl_detailOutletCountAggregateInputType = {
    id?: true
    idUser?: true
    alamatOutlet?: true
    Status?: true
    _all?: true
  }

  export type Tbl_detailOutletAggregateArgs = {
    /**
     * Filter which tbl_detailOutlet to aggregate.
     * 
    **/
    where?: tbl_detailOutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailOutlets to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailOutletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_detailOutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailOutlets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailOutlets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_detailOutlets
    **/
    _count?: true | Tbl_detailOutletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_detailOutletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_detailOutletMaxAggregateInputType
  }

  export type GetTbl_detailOutletAggregateType<T extends Tbl_detailOutletAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_detailOutlet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_detailOutlet[P]>
      : GetScalarType<T[P], AggregateTbl_detailOutlet[P]>
  }




  export type Tbl_detailOutletGroupByArgs = {
    where?: tbl_detailOutletWhereInput
    orderBy?: Enumerable<tbl_detailOutletOrderByWithAggregationInput>
    by: Array<Tbl_detailOutletScalarFieldEnum>
    having?: tbl_detailOutletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_detailOutletCountAggregateInputType | true
    _min?: Tbl_detailOutletMinAggregateInputType
    _max?: Tbl_detailOutletMaxAggregateInputType
  }


  export type Tbl_detailOutletGroupByOutputType = {
    id: string
    idUser: string
    alamatOutlet: string
    Status: string
    _count: Tbl_detailOutletCountAggregateOutputType | null
    _min: Tbl_detailOutletMinAggregateOutputType | null
    _max: Tbl_detailOutletMaxAggregateOutputType | null
  }

  type GetTbl_detailOutletGroupByPayload<T extends Tbl_detailOutletGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_detailOutletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_detailOutletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_detailOutletGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_detailOutletGroupByOutputType[P]>
        }
      >
    >


  export type tbl_detailOutletSelect = {
    id?: boolean
    tbl_user?: boolean | tbl_UserArgs
    idUser?: boolean
    alamatOutlet?: boolean
    Status?: boolean
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_detailOutletCountOutputTypeArgs
  }

  export type tbl_detailOutletInclude = {
    tbl_user?: boolean | tbl_UserArgs
    tbl_Transaction?: boolean | tbl_TransactionFindManyArgs
    _count?: boolean | Tbl_detailOutletCountOutputTypeArgs
  }

  export type tbl_detailOutletGetPayload<
    S extends boolean | null | undefined | tbl_detailOutletArgs,
    U = keyof S
      > = S extends true
        ? tbl_detailOutlet
    : S extends undefined
    ? never
    : S extends tbl_detailOutletArgs | tbl_detailOutletFindManyArgs
    ?'include' extends U
    ? tbl_detailOutlet  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_user' ? tbl_UserGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_detailOutletCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_user' ? tbl_UserGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'tbl_Transaction' ? Array < tbl_TransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_detailOutletCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof tbl_detailOutlet ? tbl_detailOutlet[P] : never
  } 
    : tbl_detailOutlet
  : tbl_detailOutlet


  type tbl_detailOutletCountArgs = Merge<
    Omit<tbl_detailOutletFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_detailOutletCountAggregateInputType | true
    }
  >

  export interface tbl_detailOutletDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_detailOutlet that matches the filter.
     * @param {tbl_detailOutletFindUniqueArgs} args - Arguments to find a Tbl_detailOutlet
     * @example
     * // Get one Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_detailOutletFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_detailOutletFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_detailOutlet'> extends True ? CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>> : CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet | null, null>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_detailOutlet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailOutletFindFirstArgs} args - Arguments to find a Tbl_detailOutlet
     * @example
     * // Get one Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_detailOutletFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_detailOutletFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_detailOutlet'> extends True ? CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>> : CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet | null, null>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_detailOutlets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailOutletFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_detailOutlets
     * const tbl_detailOutlets = await prisma.tbl_detailOutlet.findMany()
     * 
     * // Get first 10 Tbl_detailOutlets
     * const tbl_detailOutlets = await prisma.tbl_detailOutlet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_detailOutletWithIdOnly = await prisma.tbl_detailOutlet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_detailOutletFindManyArgs>(
      args?: SelectSubset<T, tbl_detailOutletFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_detailOutlet>>, PrismaPromise<Array<tbl_detailOutletGetPayload<T>>>>

    /**
     * Create a Tbl_detailOutlet.
     * @param {tbl_detailOutletCreateArgs} args - Arguments to create a Tbl_detailOutlet.
     * @example
     * // Create one Tbl_detailOutlet
     * const Tbl_detailOutlet = await prisma.tbl_detailOutlet.create({
     *   data: {
     *     // ... data to create a Tbl_detailOutlet
     *   }
     * })
     * 
    **/
    create<T extends tbl_detailOutletCreateArgs>(
      args: SelectSubset<T, tbl_detailOutletCreateArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Create many Tbl_detailOutlets.
     *     @param {tbl_detailOutletCreateManyArgs} args - Arguments to create many Tbl_detailOutlets.
     *     @example
     *     // Create many Tbl_detailOutlets
     *     const tbl_detailOutlet = await prisma.tbl_detailOutlet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_detailOutletCreateManyArgs>(
      args?: SelectSubset<T, tbl_detailOutletCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_detailOutlet.
     * @param {tbl_detailOutletDeleteArgs} args - Arguments to delete one Tbl_detailOutlet.
     * @example
     * // Delete one Tbl_detailOutlet
     * const Tbl_detailOutlet = await prisma.tbl_detailOutlet.delete({
     *   where: {
     *     // ... filter to delete one Tbl_detailOutlet
     *   }
     * })
     * 
    **/
    delete<T extends tbl_detailOutletDeleteArgs>(
      args: SelectSubset<T, tbl_detailOutletDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Update one Tbl_detailOutlet.
     * @param {tbl_detailOutletUpdateArgs} args - Arguments to update one Tbl_detailOutlet.
     * @example
     * // Update one Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_detailOutletUpdateArgs>(
      args: SelectSubset<T, tbl_detailOutletUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Delete zero or more Tbl_detailOutlets.
     * @param {tbl_detailOutletDeleteManyArgs} args - Arguments to filter Tbl_detailOutlets to delete.
     * @example
     * // Delete a few Tbl_detailOutlets
     * const { count } = await prisma.tbl_detailOutlet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_detailOutletDeleteManyArgs>(
      args?: SelectSubset<T, tbl_detailOutletDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_detailOutlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailOutletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_detailOutlets
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_detailOutletUpdateManyArgs>(
      args: SelectSubset<T, tbl_detailOutletUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_detailOutlet.
     * @param {tbl_detailOutletUpsertArgs} args - Arguments to update or create a Tbl_detailOutlet.
     * @example
     * // Update or create a Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.upsert({
     *   create: {
     *     // ... data to create a Tbl_detailOutlet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_detailOutlet we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_detailOutletUpsertArgs>(
      args: SelectSubset<T, tbl_detailOutletUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Find one Tbl_detailOutlet that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_detailOutletFindUniqueOrThrowArgs} args - Arguments to find a Tbl_detailOutlet
     * @example
     * // Get one Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_detailOutletFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_detailOutletFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Find the first Tbl_detailOutlet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailOutletFindFirstOrThrowArgs} args - Arguments to find a Tbl_detailOutlet
     * @example
     * // Get one Tbl_detailOutlet
     * const tbl_detailOutlet = await prisma.tbl_detailOutlet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_detailOutletFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_detailOutletFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T>>>

    /**
     * Count the number of Tbl_detailOutlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_detailOutletCountArgs} args - Arguments to filter Tbl_detailOutlets to count.
     * @example
     * // Count the number of Tbl_detailOutlets
     * const count = await prisma.tbl_detailOutlet.count({
     *   where: {
     *     // ... the filter for the Tbl_detailOutlets we want to count
     *   }
     * })
    **/
    count<T extends tbl_detailOutletCountArgs>(
      args?: Subset<T, tbl_detailOutletCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_detailOutletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_detailOutlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_detailOutletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_detailOutletAggregateArgs>(args: Subset<T, Tbl_detailOutletAggregateArgs>): PrismaPromise<GetTbl_detailOutletAggregateType<T>>

    /**
     * Group by Tbl_detailOutlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_detailOutletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_detailOutletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_detailOutletGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_detailOutletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_detailOutletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_detailOutletGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_detailOutlet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_detailOutletClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_user<T extends tbl_UserArgs = {}>(args?: Subset<T, tbl_UserArgs>): CheckSelect<T, Prisma__tbl_UserClient<tbl_User | Null>, Prisma__tbl_UserClient<tbl_UserGetPayload<T> | Null>>;

    tbl_Transaction<T extends tbl_TransactionFindManyArgs = {}>(args?: Subset<T, tbl_TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_Transaction>| Null>, PrismaPromise<Array<tbl_TransactionGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_detailOutlet base type for findUnique actions
   */
  export type tbl_detailOutletFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * Filter, which tbl_detailOutlet to fetch.
     * 
    **/
    where: tbl_detailOutletWhereUniqueInput
  }

  /**
   * tbl_detailOutlet: findUnique
   */
  export interface tbl_detailOutletFindUniqueArgs extends tbl_detailOutletFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_detailOutlet base type for findFirst actions
   */
  export type tbl_detailOutletFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * Filter, which tbl_detailOutlet to fetch.
     * 
    **/
    where?: tbl_detailOutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailOutlets to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailOutletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_detailOutlets.
     * 
    **/
    cursor?: tbl_detailOutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailOutlets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailOutlets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_detailOutlets.
     * 
    **/
    distinct?: Enumerable<Tbl_detailOutletScalarFieldEnum>
  }

  /**
   * tbl_detailOutlet: findFirst
   */
  export interface tbl_detailOutletFindFirstArgs extends tbl_detailOutletFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_detailOutlet findMany
   */
  export type tbl_detailOutletFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * Filter, which tbl_detailOutlets to fetch.
     * 
    **/
    where?: tbl_detailOutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_detailOutlets to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_detailOutletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_detailOutlets.
     * 
    **/
    cursor?: tbl_detailOutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_detailOutlets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_detailOutlets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_detailOutletScalarFieldEnum>
  }


  /**
   * tbl_detailOutlet create
   */
  export type tbl_detailOutletCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * The data needed to create a tbl_detailOutlet.
     * 
    **/
    data: XOR<tbl_detailOutletCreateInput, tbl_detailOutletUncheckedCreateInput>
  }


  /**
   * tbl_detailOutlet createMany
   */
  export type tbl_detailOutletCreateManyArgs = {
    /**
     * The data used to create many tbl_detailOutlets.
     * 
    **/
    data: Enumerable<tbl_detailOutletCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_detailOutlet update
   */
  export type tbl_detailOutletUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * The data needed to update a tbl_detailOutlet.
     * 
    **/
    data: XOR<tbl_detailOutletUpdateInput, tbl_detailOutletUncheckedUpdateInput>
    /**
     * Choose, which tbl_detailOutlet to update.
     * 
    **/
    where: tbl_detailOutletWhereUniqueInput
  }


  /**
   * tbl_detailOutlet updateMany
   */
  export type tbl_detailOutletUpdateManyArgs = {
    /**
     * The data used to update tbl_detailOutlets.
     * 
    **/
    data: XOR<tbl_detailOutletUpdateManyMutationInput, tbl_detailOutletUncheckedUpdateManyInput>
    /**
     * Filter which tbl_detailOutlets to update
     * 
    **/
    where?: tbl_detailOutletWhereInput
  }


  /**
   * tbl_detailOutlet upsert
   */
  export type tbl_detailOutletUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * The filter to search for the tbl_detailOutlet to update in case it exists.
     * 
    **/
    where: tbl_detailOutletWhereUniqueInput
    /**
     * In case the tbl_detailOutlet found by the `where` argument doesn't exist, create a new tbl_detailOutlet with this data.
     * 
    **/
    create: XOR<tbl_detailOutletCreateInput, tbl_detailOutletUncheckedCreateInput>
    /**
     * In case the tbl_detailOutlet was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_detailOutletUpdateInput, tbl_detailOutletUncheckedUpdateInput>
  }


  /**
   * tbl_detailOutlet delete
   */
  export type tbl_detailOutletDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
    /**
     * Filter which tbl_detailOutlet to delete.
     * 
    **/
    where: tbl_detailOutletWhereUniqueInput
  }


  /**
   * tbl_detailOutlet deleteMany
   */
  export type tbl_detailOutletDeleteManyArgs = {
    /**
     * Filter which tbl_detailOutlets to delete
     * 
    **/
    where?: tbl_detailOutletWhereInput
  }


  /**
   * tbl_detailOutlet: findUniqueOrThrow
   */
  export type tbl_detailOutletFindUniqueOrThrowArgs = tbl_detailOutletFindUniqueArgsBase
      

  /**
   * tbl_detailOutlet: findFirstOrThrow
   */
  export type tbl_detailOutletFindFirstOrThrowArgs = tbl_detailOutletFindFirstArgsBase
      

  /**
   * tbl_detailOutlet without action
   */
  export type tbl_detailOutletArgs = {
    /**
     * Select specific fields to fetch from the tbl_detailOutlet
     * 
    **/
    select?: tbl_detailOutletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_detailOutletInclude | null
  }



  /**
   * Model tbl_Transaction
   */


  export type AggregateTbl_Transaction = {
    _count: Tbl_TransactionCountAggregateOutputType | null
    _min: Tbl_TransactionMinAggregateOutputType | null
    _max: Tbl_TransactionMaxAggregateOutputType | null
  }

  export type Tbl_TransactionMinAggregateOutputType = {
    id: string | null
    idUser: string | null
    idOutlet: string | null
    idMenu: string | null
    status: string | null
    payment: string | null
    time: Date | null
    promo: string | null
  }

  export type Tbl_TransactionMaxAggregateOutputType = {
    id: string | null
    idUser: string | null
    idOutlet: string | null
    idMenu: string | null
    status: string | null
    payment: string | null
    time: Date | null
    promo: string | null
  }

  export type Tbl_TransactionCountAggregateOutputType = {
    id: number
    idUser: number
    idOutlet: number
    idMenu: number
    status: number
    payment: number
    time: number
    promo: number
    _all: number
  }


  export type Tbl_TransactionMinAggregateInputType = {
    id?: true
    idUser?: true
    idOutlet?: true
    idMenu?: true
    status?: true
    payment?: true
    time?: true
    promo?: true
  }

  export type Tbl_TransactionMaxAggregateInputType = {
    id?: true
    idUser?: true
    idOutlet?: true
    idMenu?: true
    status?: true
    payment?: true
    time?: true
    promo?: true
  }

  export type Tbl_TransactionCountAggregateInputType = {
    id?: true
    idUser?: true
    idOutlet?: true
    idMenu?: true
    status?: true
    payment?: true
    time?: true
    promo?: true
    _all?: true
  }

  export type Tbl_TransactionAggregateArgs = {
    /**
     * Filter which tbl_Transaction to aggregate.
     * 
    **/
    where?: tbl_TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_Transactions
    **/
    _count?: true | Tbl_TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_TransactionMaxAggregateInputType
  }

  export type GetTbl_TransactionAggregateType<T extends Tbl_TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_Transaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_Transaction[P]>
      : GetScalarType<T[P], AggregateTbl_Transaction[P]>
  }




  export type Tbl_TransactionGroupByArgs = {
    where?: tbl_TransactionWhereInput
    orderBy?: Enumerable<tbl_TransactionOrderByWithAggregationInput>
    by: Array<Tbl_TransactionScalarFieldEnum>
    having?: tbl_TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_TransactionCountAggregateInputType | true
    _min?: Tbl_TransactionMinAggregateInputType
    _max?: Tbl_TransactionMaxAggregateInputType
  }


  export type Tbl_TransactionGroupByOutputType = {
    id: string
    idUser: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time: Date
    promo: string
    _count: Tbl_TransactionCountAggregateOutputType | null
    _min: Tbl_TransactionMinAggregateOutputType | null
    _max: Tbl_TransactionMaxAggregateOutputType | null
  }

  type GetTbl_TransactionGroupByPayload<T extends Tbl_TransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_TransactionGroupByOutputType[P]>
        }
      >
    >


  export type tbl_TransactionSelect = {
    id?: boolean
    tbl_user?: boolean | tbl_UserArgs
    idUser?: boolean
    tbl_detailOutlet?: boolean | tbl_detailOutletArgs
    idOutlet?: boolean
    tbl_Menu?: boolean | tbl_MenuArgs
    idMenu?: boolean
    status?: boolean
    payment?: boolean
    time?: boolean
    promo?: boolean
    tbl_detailTransaction?: boolean | tbl_detailTransactionFindManyArgs
    _count?: boolean | Tbl_TransactionCountOutputTypeArgs
  }

  export type tbl_TransactionInclude = {
    tbl_user?: boolean | tbl_UserArgs
    tbl_detailOutlet?: boolean | tbl_detailOutletArgs
    tbl_Menu?: boolean | tbl_MenuArgs
    tbl_detailTransaction?: boolean | tbl_detailTransactionFindManyArgs
    _count?: boolean | Tbl_TransactionCountOutputTypeArgs
  }

  export type tbl_TransactionGetPayload<
    S extends boolean | null | undefined | tbl_TransactionArgs,
    U = keyof S
      > = S extends true
        ? tbl_Transaction
    : S extends undefined
    ? never
    : S extends tbl_TransactionArgs | tbl_TransactionFindManyArgs
    ?'include' extends U
    ? tbl_Transaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_user' ? tbl_UserGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'tbl_detailOutlet' ? tbl_detailOutletGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'tbl_Menu' ? tbl_MenuGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'tbl_detailTransaction' ? Array < tbl_detailTransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_TransactionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_user' ? tbl_UserGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'tbl_detailOutlet' ? tbl_detailOutletGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'tbl_Menu' ? tbl_MenuGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'tbl_detailTransaction' ? Array < tbl_detailTransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? Tbl_TransactionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof tbl_Transaction ? tbl_Transaction[P] : never
  } 
    : tbl_Transaction
  : tbl_Transaction


  type tbl_TransactionCountArgs = Merge<
    Omit<tbl_TransactionFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_TransactionCountAggregateInputType | true
    }
  >

  export interface tbl_TransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_Transaction that matches the filter.
     * @param {tbl_TransactionFindUniqueArgs} args - Arguments to find a Tbl_Transaction
     * @example
     * // Get one Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_Transaction'> extends True ? CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>> : CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction | null, null>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_TransactionFindFirstArgs} args - Arguments to find a Tbl_Transaction
     * @example
     * // Get one Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_Transaction'> extends True ? CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>> : CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction | null, null>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_Transactions
     * const tbl_Transactions = await prisma.tbl_Transaction.findMany()
     * 
     * // Get first 10 Tbl_Transactions
     * const tbl_Transactions = await prisma.tbl_Transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_TransactionWithIdOnly = await prisma.tbl_Transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_TransactionFindManyArgs>(
      args?: SelectSubset<T, tbl_TransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_Transaction>>, PrismaPromise<Array<tbl_TransactionGetPayload<T>>>>

    /**
     * Create a Tbl_Transaction.
     * @param {tbl_TransactionCreateArgs} args - Arguments to create a Tbl_Transaction.
     * @example
     * // Create one Tbl_Transaction
     * const Tbl_Transaction = await prisma.tbl_Transaction.create({
     *   data: {
     *     // ... data to create a Tbl_Transaction
     *   }
     * })
     * 
    **/
    create<T extends tbl_TransactionCreateArgs>(
      args: SelectSubset<T, tbl_TransactionCreateArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Create many Tbl_Transactions.
     *     @param {tbl_TransactionCreateManyArgs} args - Arguments to create many Tbl_Transactions.
     *     @example
     *     // Create many Tbl_Transactions
     *     const tbl_Transaction = await prisma.tbl_Transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_TransactionCreateManyArgs>(
      args?: SelectSubset<T, tbl_TransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_Transaction.
     * @param {tbl_TransactionDeleteArgs} args - Arguments to delete one Tbl_Transaction.
     * @example
     * // Delete one Tbl_Transaction
     * const Tbl_Transaction = await prisma.tbl_Transaction.delete({
     *   where: {
     *     // ... filter to delete one Tbl_Transaction
     *   }
     * })
     * 
    **/
    delete<T extends tbl_TransactionDeleteArgs>(
      args: SelectSubset<T, tbl_TransactionDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Update one Tbl_Transaction.
     * @param {tbl_TransactionUpdateArgs} args - Arguments to update one Tbl_Transaction.
     * @example
     * // Update one Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_TransactionUpdateArgs>(
      args: SelectSubset<T, tbl_TransactionUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Delete zero or more Tbl_Transactions.
     * @param {tbl_TransactionDeleteManyArgs} args - Arguments to filter Tbl_Transactions to delete.
     * @example
     * // Delete a few Tbl_Transactions
     * const { count } = await prisma.tbl_Transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_TransactionDeleteManyArgs>(
      args?: SelectSubset<T, tbl_TransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_Transactions
     * const tbl_Transaction = await prisma.tbl_Transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_TransactionUpdateManyArgs>(
      args: SelectSubset<T, tbl_TransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_Transaction.
     * @param {tbl_TransactionUpsertArgs} args - Arguments to update or create a Tbl_Transaction.
     * @example
     * // Update or create a Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.upsert({
     *   create: {
     *     // ... data to create a Tbl_Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_TransactionUpsertArgs>(
      args: SelectSubset<T, tbl_TransactionUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Find one Tbl_Transaction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_TransactionFindUniqueOrThrowArgs} args - Arguments to find a Tbl_Transaction
     * @example
     * // Get one Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_TransactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_TransactionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Find the first Tbl_Transaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_TransactionFindFirstOrThrowArgs} args - Arguments to find a Tbl_Transaction
     * @example
     * // Get one Tbl_Transaction
     * const tbl_Transaction = await prisma.tbl_Transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_TransactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_TransactionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_TransactionClient<tbl_Transaction>, Prisma__tbl_TransactionClient<tbl_TransactionGetPayload<T>>>

    /**
     * Count the number of Tbl_Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_TransactionCountArgs} args - Arguments to filter Tbl_Transactions to count.
     * @example
     * // Count the number of Tbl_Transactions
     * const count = await prisma.tbl_Transaction.count({
     *   where: {
     *     // ... the filter for the Tbl_Transactions we want to count
     *   }
     * })
    **/
    count<T extends tbl_TransactionCountArgs>(
      args?: Subset<T, tbl_TransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_TransactionAggregateArgs>(args: Subset<T, Tbl_TransactionAggregateArgs>): PrismaPromise<GetTbl_TransactionAggregateType<T>>

    /**
     * Group by Tbl_Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_TransactionGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_TransactionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_TransactionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_user<T extends tbl_UserArgs = {}>(args?: Subset<T, tbl_UserArgs>): CheckSelect<T, Prisma__tbl_UserClient<tbl_User | Null>, Prisma__tbl_UserClient<tbl_UserGetPayload<T> | Null>>;

    tbl_detailOutlet<T extends tbl_detailOutletArgs = {}>(args?: Subset<T, tbl_detailOutletArgs>): CheckSelect<T, Prisma__tbl_detailOutletClient<tbl_detailOutlet | Null>, Prisma__tbl_detailOutletClient<tbl_detailOutletGetPayload<T> | Null>>;

    tbl_Menu<T extends tbl_MenuArgs = {}>(args?: Subset<T, tbl_MenuArgs>): CheckSelect<T, Prisma__tbl_MenuClient<tbl_Menu | Null>, Prisma__tbl_MenuClient<tbl_MenuGetPayload<T> | Null>>;

    tbl_detailTransaction<T extends tbl_detailTransactionFindManyArgs = {}>(args?: Subset<T, tbl_detailTransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_detailTransaction>| Null>, PrismaPromise<Array<tbl_detailTransactionGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_Transaction base type for findUnique actions
   */
  export type tbl_TransactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * Filter, which tbl_Transaction to fetch.
     * 
    **/
    where: tbl_TransactionWhereUniqueInput
  }

  /**
   * tbl_Transaction: findUnique
   */
  export interface tbl_TransactionFindUniqueArgs extends tbl_TransactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_Transaction base type for findFirst actions
   */
  export type tbl_TransactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * Filter, which tbl_Transaction to fetch.
     * 
    **/
    where?: tbl_TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_Transactions.
     * 
    **/
    cursor?: tbl_TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_Transactions.
     * 
    **/
    distinct?: Enumerable<Tbl_TransactionScalarFieldEnum>
  }

  /**
   * tbl_Transaction: findFirst
   */
  export interface tbl_TransactionFindFirstArgs extends tbl_TransactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_Transaction findMany
   */
  export type tbl_TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * Filter, which tbl_Transactions to fetch.
     * 
    **/
    where?: tbl_TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_Transactions.
     * 
    **/
    cursor?: tbl_TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_Transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_TransactionScalarFieldEnum>
  }


  /**
   * tbl_Transaction create
   */
  export type tbl_TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * The data needed to create a tbl_Transaction.
     * 
    **/
    data: XOR<tbl_TransactionCreateInput, tbl_TransactionUncheckedCreateInput>
  }


  /**
   * tbl_Transaction createMany
   */
  export type tbl_TransactionCreateManyArgs = {
    /**
     * The data used to create many tbl_Transactions.
     * 
    **/
    data: Enumerable<tbl_TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_Transaction update
   */
  export type tbl_TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * The data needed to update a tbl_Transaction.
     * 
    **/
    data: XOR<tbl_TransactionUpdateInput, tbl_TransactionUncheckedUpdateInput>
    /**
     * Choose, which tbl_Transaction to update.
     * 
    **/
    where: tbl_TransactionWhereUniqueInput
  }


  /**
   * tbl_Transaction updateMany
   */
  export type tbl_TransactionUpdateManyArgs = {
    /**
     * The data used to update tbl_Transactions.
     * 
    **/
    data: XOR<tbl_TransactionUpdateManyMutationInput, tbl_TransactionUncheckedUpdateManyInput>
    /**
     * Filter which tbl_Transactions to update
     * 
    **/
    where?: tbl_TransactionWhereInput
  }


  /**
   * tbl_Transaction upsert
   */
  export type tbl_TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * The filter to search for the tbl_Transaction to update in case it exists.
     * 
    **/
    where: tbl_TransactionWhereUniqueInput
    /**
     * In case the tbl_Transaction found by the `where` argument doesn't exist, create a new tbl_Transaction with this data.
     * 
    **/
    create: XOR<tbl_TransactionCreateInput, tbl_TransactionUncheckedCreateInput>
    /**
     * In case the tbl_Transaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_TransactionUpdateInput, tbl_TransactionUncheckedUpdateInput>
  }


  /**
   * tbl_Transaction delete
   */
  export type tbl_TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
    /**
     * Filter which tbl_Transaction to delete.
     * 
    **/
    where: tbl_TransactionWhereUniqueInput
  }


  /**
   * tbl_Transaction deleteMany
   */
  export type tbl_TransactionDeleteManyArgs = {
    /**
     * Filter which tbl_Transactions to delete
     * 
    **/
    where?: tbl_TransactionWhereInput
  }


  /**
   * tbl_Transaction: findUniqueOrThrow
   */
  export type tbl_TransactionFindUniqueOrThrowArgs = tbl_TransactionFindUniqueArgsBase
      

  /**
   * tbl_Transaction: findFirstOrThrow
   */
  export type tbl_TransactionFindFirstOrThrowArgs = tbl_TransactionFindFirstArgsBase
      

  /**
   * tbl_Transaction without action
   */
  export type tbl_TransactionArgs = {
    /**
     * Select specific fields to fetch from the tbl_Transaction
     * 
    **/
    select?: tbl_TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_TransactionInclude | null
  }



  /**
   * Model tbl_log
   */


  export type AggregateTbl_log = {
    _count: Tbl_logCountAggregateOutputType | null
    _min: Tbl_logMinAggregateOutputType | null
    _max: Tbl_logMaxAggregateOutputType | null
  }

  export type Tbl_logMinAggregateOutputType = {
    id: string | null
    jenisLog: string | null
    created_at: Date | null
    idUser: string | null
  }

  export type Tbl_logMaxAggregateOutputType = {
    id: string | null
    jenisLog: string | null
    created_at: Date | null
    idUser: string | null
  }

  export type Tbl_logCountAggregateOutputType = {
    id: number
    jenisLog: number
    created_at: number
    idUser: number
    _all: number
  }


  export type Tbl_logMinAggregateInputType = {
    id?: true
    jenisLog?: true
    created_at?: true
    idUser?: true
  }

  export type Tbl_logMaxAggregateInputType = {
    id?: true
    jenisLog?: true
    created_at?: true
    idUser?: true
  }

  export type Tbl_logCountAggregateInputType = {
    id?: true
    jenisLog?: true
    created_at?: true
    idUser?: true
    _all?: true
  }

  export type Tbl_logAggregateArgs = {
    /**
     * Filter which tbl_log to aggregate.
     * 
    **/
    where?: tbl_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_logs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_logOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_logs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_logs
    **/
    _count?: true | Tbl_logCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_logMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_logMaxAggregateInputType
  }

  export type GetTbl_logAggregateType<T extends Tbl_logAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_log]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_log[P]>
      : GetScalarType<T[P], AggregateTbl_log[P]>
  }




  export type Tbl_logGroupByArgs = {
    where?: tbl_logWhereInput
    orderBy?: Enumerable<tbl_logOrderByWithAggregationInput>
    by: Array<Tbl_logScalarFieldEnum>
    having?: tbl_logScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_logCountAggregateInputType | true
    _min?: Tbl_logMinAggregateInputType
    _max?: Tbl_logMaxAggregateInputType
  }


  export type Tbl_logGroupByOutputType = {
    id: string
    jenisLog: string
    created_at: Date
    idUser: string
    _count: Tbl_logCountAggregateOutputType | null
    _min: Tbl_logMinAggregateOutputType | null
    _max: Tbl_logMaxAggregateOutputType | null
  }

  type GetTbl_logGroupByPayload<T extends Tbl_logGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_logGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_logGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_logGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_logGroupByOutputType[P]>
        }
      >
    >


  export type tbl_logSelect = {
    id?: boolean
    jenisLog?: boolean
    created_at?: boolean
    idUser?: boolean
  }

  export type tbl_logGetPayload<
    S extends boolean | null | undefined | tbl_logArgs,
    U = keyof S
      > = S extends true
        ? tbl_log
    : S extends undefined
    ? never
    : S extends tbl_logArgs | tbl_logFindManyArgs
    ?'include' extends U
    ? tbl_log 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_log ? tbl_log[P] : never
  } 
    : tbl_log
  : tbl_log


  type tbl_logCountArgs = Merge<
    Omit<tbl_logFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_logCountAggregateInputType | true
    }
  >

  export interface tbl_logDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tbl_log that matches the filter.
     * @param {tbl_logFindUniqueArgs} args - Arguments to find a Tbl_log
     * @example
     * // Get one Tbl_log
     * const tbl_log = await prisma.tbl_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_logFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_logFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_log'> extends True ? CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>> : CheckSelect<T, Prisma__tbl_logClient<tbl_log | null, null>, Prisma__tbl_logClient<tbl_logGetPayload<T> | null, null>>

    /**
     * Find the first Tbl_log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_logFindFirstArgs} args - Arguments to find a Tbl_log
     * @example
     * // Get one Tbl_log
     * const tbl_log = await prisma.tbl_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_logFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_logFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_log'> extends True ? CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>> : CheckSelect<T, Prisma__tbl_logClient<tbl_log | null, null>, Prisma__tbl_logClient<tbl_logGetPayload<T> | null, null>>

    /**
     * Find zero or more Tbl_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_logFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_logs
     * const tbl_logs = await prisma.tbl_log.findMany()
     * 
     * // Get first 10 Tbl_logs
     * const tbl_logs = await prisma.tbl_log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_logWithIdOnly = await prisma.tbl_log.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_logFindManyArgs>(
      args?: SelectSubset<T, tbl_logFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_log>>, PrismaPromise<Array<tbl_logGetPayload<T>>>>

    /**
     * Create a Tbl_log.
     * @param {tbl_logCreateArgs} args - Arguments to create a Tbl_log.
     * @example
     * // Create one Tbl_log
     * const Tbl_log = await prisma.tbl_log.create({
     *   data: {
     *     // ... data to create a Tbl_log
     *   }
     * })
     * 
    **/
    create<T extends tbl_logCreateArgs>(
      args: SelectSubset<T, tbl_logCreateArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Create many Tbl_logs.
     *     @param {tbl_logCreateManyArgs} args - Arguments to create many Tbl_logs.
     *     @example
     *     // Create many Tbl_logs
     *     const tbl_log = await prisma.tbl_log.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_logCreateManyArgs>(
      args?: SelectSubset<T, tbl_logCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_log.
     * @param {tbl_logDeleteArgs} args - Arguments to delete one Tbl_log.
     * @example
     * // Delete one Tbl_log
     * const Tbl_log = await prisma.tbl_log.delete({
     *   where: {
     *     // ... filter to delete one Tbl_log
     *   }
     * })
     * 
    **/
    delete<T extends tbl_logDeleteArgs>(
      args: SelectSubset<T, tbl_logDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Update one Tbl_log.
     * @param {tbl_logUpdateArgs} args - Arguments to update one Tbl_log.
     * @example
     * // Update one Tbl_log
     * const tbl_log = await prisma.tbl_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_logUpdateArgs>(
      args: SelectSubset<T, tbl_logUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Delete zero or more Tbl_logs.
     * @param {tbl_logDeleteManyArgs} args - Arguments to filter Tbl_logs to delete.
     * @example
     * // Delete a few Tbl_logs
     * const { count } = await prisma.tbl_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_logDeleteManyArgs>(
      args?: SelectSubset<T, tbl_logDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_logs
     * const tbl_log = await prisma.tbl_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_logUpdateManyArgs>(
      args: SelectSubset<T, tbl_logUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_log.
     * @param {tbl_logUpsertArgs} args - Arguments to update or create a Tbl_log.
     * @example
     * // Update or create a Tbl_log
     * const tbl_log = await prisma.tbl_log.upsert({
     *   create: {
     *     // ... data to create a Tbl_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_log we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_logUpsertArgs>(
      args: SelectSubset<T, tbl_logUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Find one Tbl_log that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {tbl_logFindUniqueOrThrowArgs} args - Arguments to find a Tbl_log
     * @example
     * // Get one Tbl_log
     * const tbl_log = await prisma.tbl_log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tbl_logFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, tbl_logFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Find the first Tbl_log that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_logFindFirstOrThrowArgs} args - Arguments to find a Tbl_log
     * @example
     * // Get one Tbl_log
     * const tbl_log = await prisma.tbl_log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tbl_logFindFirstOrThrowArgs>(
      args?: SelectSubset<T, tbl_logFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__tbl_logClient<tbl_log>, Prisma__tbl_logClient<tbl_logGetPayload<T>>>

    /**
     * Count the number of Tbl_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_logCountArgs} args - Arguments to filter Tbl_logs to count.
     * @example
     * // Count the number of Tbl_logs
     * const count = await prisma.tbl_log.count({
     *   where: {
     *     // ... the filter for the Tbl_logs we want to count
     *   }
     * })
    **/
    count<T extends tbl_logCountArgs>(
      args?: Subset<T, tbl_logCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_logCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_logAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_logAggregateArgs>(args: Subset<T, Tbl_logAggregateArgs>): PrismaPromise<GetTbl_logAggregateType<T>>

    /**
     * Group by Tbl_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_logGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_logGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_logGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_logGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_logGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_logClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * tbl_log base type for findUnique actions
   */
  export type tbl_logFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * Filter, which tbl_log to fetch.
     * 
    **/
    where: tbl_logWhereUniqueInput
  }

  /**
   * tbl_log: findUnique
   */
  export interface tbl_logFindUniqueArgs extends tbl_logFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_log base type for findFirst actions
   */
  export type tbl_logFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * Filter, which tbl_log to fetch.
     * 
    **/
    where?: tbl_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_logs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_logOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_logs.
     * 
    **/
    cursor?: tbl_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_logs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_logs.
     * 
    **/
    distinct?: Enumerable<Tbl_logScalarFieldEnum>
  }

  /**
   * tbl_log: findFirst
   */
  export interface tbl_logFindFirstArgs extends tbl_logFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * tbl_log findMany
   */
  export type tbl_logFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * Filter, which tbl_logs to fetch.
     * 
    **/
    where?: tbl_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_logs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_logOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_logs.
     * 
    **/
    cursor?: tbl_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_logs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_logScalarFieldEnum>
  }


  /**
   * tbl_log create
   */
  export type tbl_logCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * The data needed to create a tbl_log.
     * 
    **/
    data: XOR<tbl_logCreateInput, tbl_logUncheckedCreateInput>
  }


  /**
   * tbl_log createMany
   */
  export type tbl_logCreateManyArgs = {
    /**
     * The data used to create many tbl_logs.
     * 
    **/
    data: Enumerable<tbl_logCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_log update
   */
  export type tbl_logUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * The data needed to update a tbl_log.
     * 
    **/
    data: XOR<tbl_logUpdateInput, tbl_logUncheckedUpdateInput>
    /**
     * Choose, which tbl_log to update.
     * 
    **/
    where: tbl_logWhereUniqueInput
  }


  /**
   * tbl_log updateMany
   */
  export type tbl_logUpdateManyArgs = {
    /**
     * The data used to update tbl_logs.
     * 
    **/
    data: XOR<tbl_logUpdateManyMutationInput, tbl_logUncheckedUpdateManyInput>
    /**
     * Filter which tbl_logs to update
     * 
    **/
    where?: tbl_logWhereInput
  }


  /**
   * tbl_log upsert
   */
  export type tbl_logUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * The filter to search for the tbl_log to update in case it exists.
     * 
    **/
    where: tbl_logWhereUniqueInput
    /**
     * In case the tbl_log found by the `where` argument doesn't exist, create a new tbl_log with this data.
     * 
    **/
    create: XOR<tbl_logCreateInput, tbl_logUncheckedCreateInput>
    /**
     * In case the tbl_log was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_logUpdateInput, tbl_logUncheckedUpdateInput>
  }


  /**
   * tbl_log delete
   */
  export type tbl_logDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
    /**
     * Filter which tbl_log to delete.
     * 
    **/
    where: tbl_logWhereUniqueInput
  }


  /**
   * tbl_log deleteMany
   */
  export type tbl_logDeleteManyArgs = {
    /**
     * Filter which tbl_logs to delete
     * 
    **/
    where?: tbl_logWhereInput
  }


  /**
   * tbl_log: findUniqueOrThrow
   */
  export type tbl_logFindUniqueOrThrowArgs = tbl_logFindUniqueArgsBase
      

  /**
   * tbl_log: findFirstOrThrow
   */
  export type tbl_logFindFirstOrThrowArgs = tbl_logFindFirstArgsBase
      

  /**
   * tbl_log without action
   */
  export type tbl_logArgs = {
    /**
     * Select specific fields to fetch from the tbl_log
     * 
    **/
    select?: tbl_logSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const Tbl_MenuScalarFieldEnum: {
    id: 'id',
    nameMenu: 'nameMenu',
    priceMenu: 'priceMenu',
    descMenu: 'descMenu'
  };

  export type Tbl_MenuScalarFieldEnum = (typeof Tbl_MenuScalarFieldEnum)[keyof typeof Tbl_MenuScalarFieldEnum]


  export const Tbl_TransactionScalarFieldEnum: {
    id: 'id',
    idUser: 'idUser',
    idOutlet: 'idOutlet',
    idMenu: 'idMenu',
    status: 'status',
    payment: 'payment',
    time: 'time',
    promo: 'promo'
  };

  export type Tbl_TransactionScalarFieldEnum = (typeof Tbl_TransactionScalarFieldEnum)[keyof typeof Tbl_TransactionScalarFieldEnum]


  export const Tbl_UserScalarFieldEnum: {
    id: 'id',
    Username: 'Username',
    Password: 'Password',
    noHp: 'noHp',
    email: 'email',
    Role: 'Role'
  };

  export type Tbl_UserScalarFieldEnum = (typeof Tbl_UserScalarFieldEnum)[keyof typeof Tbl_UserScalarFieldEnum]


  export const Tbl_detailOutletScalarFieldEnum: {
    id: 'id',
    idUser: 'idUser',
    alamatOutlet: 'alamatOutlet',
    Status: 'Status'
  };

  export type Tbl_detailOutletScalarFieldEnum = (typeof Tbl_detailOutletScalarFieldEnum)[keyof typeof Tbl_detailOutletScalarFieldEnum]


  export const Tbl_detailTransactionScalarFieldEnum: {
    id: 'id',
    idTransaction: 'idTransaction',
    total: 'total',
    tbl_UserId: 'tbl_UserId'
  };

  export type Tbl_detailTransactionScalarFieldEnum = (typeof Tbl_detailTransactionScalarFieldEnum)[keyof typeof Tbl_detailTransactionScalarFieldEnum]


  export const Tbl_logScalarFieldEnum: {
    id: 'id',
    jenisLog: 'jenisLog',
    created_at: 'created_at',
    idUser: 'idUser'
  };

  export type Tbl_logScalarFieldEnum = (typeof Tbl_logScalarFieldEnum)[keyof typeof Tbl_logScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type tbl_UserWhereInput = {
    AND?: Enumerable<tbl_UserWhereInput>
    OR?: Enumerable<tbl_UserWhereInput>
    NOT?: Enumerable<tbl_UserWhereInput>
    id?: StringFilter | string
    Username?: StringFilter | string
    Password?: StringFilter | string
    noHp?: StringFilter | string
    email?: StringFilter | string
    Role?: EnumRoleFilter | Role
    tbl_detailOutlet?: Tbl_detailOutletListRelationFilter
    tbl_transaction?: Tbl_detailTransactionListRelationFilter
    tbl_Transaction?: Tbl_TransactionListRelationFilter
  }

  export type tbl_UserOrderByWithRelationInput = {
    id?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    noHp?: SortOrder
    email?: SortOrder
    Role?: SortOrder
    tbl_detailOutlet?: tbl_detailOutletOrderByRelationAggregateInput
    tbl_transaction?: tbl_detailTransactionOrderByRelationAggregateInput
    tbl_Transaction?: tbl_TransactionOrderByRelationAggregateInput
  }

  export type tbl_UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type tbl_UserOrderByWithAggregationInput = {
    id?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    noHp?: SortOrder
    email?: SortOrder
    Role?: SortOrder
    _count?: tbl_UserCountOrderByAggregateInput
    _max?: tbl_UserMaxOrderByAggregateInput
    _min?: tbl_UserMinOrderByAggregateInput
  }

  export type tbl_UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    Username?: StringWithAggregatesFilter | string
    Password?: StringWithAggregatesFilter | string
    noHp?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    Role?: EnumRoleWithAggregatesFilter | Role
  }

  export type tbl_MenuWhereInput = {
    AND?: Enumerable<tbl_MenuWhereInput>
    OR?: Enumerable<tbl_MenuWhereInput>
    NOT?: Enumerable<tbl_MenuWhereInput>
    id?: StringFilter | string
    nameMenu?: StringFilter | string
    priceMenu?: IntFilter | number
    descMenu?: StringFilter | string
    tbl_Transaction?: Tbl_TransactionListRelationFilter
  }

  export type tbl_MenuOrderByWithRelationInput = {
    id?: SortOrder
    nameMenu?: SortOrder
    priceMenu?: SortOrder
    descMenu?: SortOrder
    tbl_Transaction?: tbl_TransactionOrderByRelationAggregateInput
  }

  export type tbl_MenuWhereUniqueInput = {
    id?: string
  }

  export type tbl_MenuOrderByWithAggregationInput = {
    id?: SortOrder
    nameMenu?: SortOrder
    priceMenu?: SortOrder
    descMenu?: SortOrder
    _count?: tbl_MenuCountOrderByAggregateInput
    _avg?: tbl_MenuAvgOrderByAggregateInput
    _max?: tbl_MenuMaxOrderByAggregateInput
    _min?: tbl_MenuMinOrderByAggregateInput
    _sum?: tbl_MenuSumOrderByAggregateInput
  }

  export type tbl_MenuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_MenuScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_MenuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_MenuScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nameMenu?: StringWithAggregatesFilter | string
    priceMenu?: IntWithAggregatesFilter | number
    descMenu?: StringWithAggregatesFilter | string
  }

  export type tbl_detailTransactionWhereInput = {
    AND?: Enumerable<tbl_detailTransactionWhereInput>
    OR?: Enumerable<tbl_detailTransactionWhereInput>
    NOT?: Enumerable<tbl_detailTransactionWhereInput>
    id?: StringFilter | string
    tbl_Transaction?: XOR<Tbl_TransactionRelationFilter, tbl_TransactionWhereInput> | null
    idTransaction?: StringFilter | string
    total?: IntFilter | number
    tbl_User?: XOR<Tbl_UserRelationFilter, tbl_UserWhereInput> | null
    tbl_UserId?: StringNullableFilter | string | null
  }

  export type tbl_detailTransactionOrderByWithRelationInput = {
    id?: SortOrder
    tbl_Transaction?: tbl_TransactionOrderByWithRelationInput
    idTransaction?: SortOrder
    total?: SortOrder
    tbl_User?: tbl_UserOrderByWithRelationInput
    tbl_UserId?: SortOrder
  }

  export type tbl_detailTransactionWhereUniqueInput = {
    id?: string
  }

  export type tbl_detailTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    idTransaction?: SortOrder
    total?: SortOrder
    tbl_UserId?: SortOrder
    _count?: tbl_detailTransactionCountOrderByAggregateInput
    _avg?: tbl_detailTransactionAvgOrderByAggregateInput
    _max?: tbl_detailTransactionMaxOrderByAggregateInput
    _min?: tbl_detailTransactionMinOrderByAggregateInput
    _sum?: tbl_detailTransactionSumOrderByAggregateInput
  }

  export type tbl_detailTransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_detailTransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_detailTransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_detailTransactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    idTransaction?: StringWithAggregatesFilter | string
    total?: IntWithAggregatesFilter | number
    tbl_UserId?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbl_detailOutletWhereInput = {
    AND?: Enumerable<tbl_detailOutletWhereInput>
    OR?: Enumerable<tbl_detailOutletWhereInput>
    NOT?: Enumerable<tbl_detailOutletWhereInput>
    id?: StringFilter | string
    tbl_user?: XOR<Tbl_UserRelationFilter, tbl_UserWhereInput> | null
    idUser?: StringFilter | string
    alamatOutlet?: StringFilter | string
    Status?: StringFilter | string
    tbl_Transaction?: Tbl_TransactionListRelationFilter
  }

  export type tbl_detailOutletOrderByWithRelationInput = {
    id?: SortOrder
    tbl_user?: tbl_UserOrderByWithRelationInput
    idUser?: SortOrder
    alamatOutlet?: SortOrder
    Status?: SortOrder
    tbl_Transaction?: tbl_TransactionOrderByRelationAggregateInput
  }

  export type tbl_detailOutletWhereUniqueInput = {
    id?: string
  }

  export type tbl_detailOutletOrderByWithAggregationInput = {
    id?: SortOrder
    idUser?: SortOrder
    alamatOutlet?: SortOrder
    Status?: SortOrder
    _count?: tbl_detailOutletCountOrderByAggregateInput
    _max?: tbl_detailOutletMaxOrderByAggregateInput
    _min?: tbl_detailOutletMinOrderByAggregateInput
  }

  export type tbl_detailOutletScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_detailOutletScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_detailOutletScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_detailOutletScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    idUser?: StringWithAggregatesFilter | string
    alamatOutlet?: StringWithAggregatesFilter | string
    Status?: StringWithAggregatesFilter | string
  }

  export type tbl_TransactionWhereInput = {
    AND?: Enumerable<tbl_TransactionWhereInput>
    OR?: Enumerable<tbl_TransactionWhereInput>
    NOT?: Enumerable<tbl_TransactionWhereInput>
    id?: StringFilter | string
    tbl_user?: XOR<Tbl_UserRelationFilter, tbl_UserWhereInput> | null
    idUser?: StringFilter | string
    tbl_detailOutlet?: XOR<Tbl_detailOutletRelationFilter, tbl_detailOutletWhereInput> | null
    idOutlet?: StringFilter | string
    tbl_Menu?: XOR<Tbl_MenuRelationFilter, tbl_MenuWhereInput> | null
    idMenu?: StringFilter | string
    status?: StringFilter | string
    payment?: StringFilter | string
    time?: DateTimeFilter | Date | string
    promo?: StringFilter | string
    tbl_detailTransaction?: Tbl_detailTransactionListRelationFilter
  }

  export type tbl_TransactionOrderByWithRelationInput = {
    id?: SortOrder
    tbl_user?: tbl_UserOrderByWithRelationInput
    idUser?: SortOrder
    tbl_detailOutlet?: tbl_detailOutletOrderByWithRelationInput
    idOutlet?: SortOrder
    tbl_Menu?: tbl_MenuOrderByWithRelationInput
    idMenu?: SortOrder
    status?: SortOrder
    payment?: SortOrder
    time?: SortOrder
    promo?: SortOrder
    tbl_detailTransaction?: tbl_detailTransactionOrderByRelationAggregateInput
  }

  export type tbl_TransactionWhereUniqueInput = {
    id?: string
  }

  export type tbl_TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    idUser?: SortOrder
    idOutlet?: SortOrder
    idMenu?: SortOrder
    status?: SortOrder
    payment?: SortOrder
    time?: SortOrder
    promo?: SortOrder
    _count?: tbl_TransactionCountOrderByAggregateInput
    _max?: tbl_TransactionMaxOrderByAggregateInput
    _min?: tbl_TransactionMinOrderByAggregateInput
  }

  export type tbl_TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_TransactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    idUser?: StringWithAggregatesFilter | string
    idOutlet?: StringWithAggregatesFilter | string
    idMenu?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    payment?: StringWithAggregatesFilter | string
    time?: DateTimeWithAggregatesFilter | Date | string
    promo?: StringWithAggregatesFilter | string
  }

  export type tbl_logWhereInput = {
    AND?: Enumerable<tbl_logWhereInput>
    OR?: Enumerable<tbl_logWhereInput>
    NOT?: Enumerable<tbl_logWhereInput>
    id?: StringFilter | string
    jenisLog?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    idUser?: StringFilter | string
  }

  export type tbl_logOrderByWithRelationInput = {
    id?: SortOrder
    jenisLog?: SortOrder
    created_at?: SortOrder
    idUser?: SortOrder
  }

  export type tbl_logWhereUniqueInput = {
    id?: string
  }

  export type tbl_logOrderByWithAggregationInput = {
    id?: SortOrder
    jenisLog?: SortOrder
    created_at?: SortOrder
    idUser?: SortOrder
    _count?: tbl_logCountOrderByAggregateInput
    _max?: tbl_logMaxOrderByAggregateInput
    _min?: tbl_logMinOrderByAggregateInput
  }

  export type tbl_logScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_logScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_logScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_logScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    jenisLog?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    idUser?: StringWithAggregatesFilter | string
  }

  export type tbl_UserCreateInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletCreateNestedManyWithoutTbl_userInput
    tbl_transaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_UserInput
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserUncheckedCreateInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedCreateNestedManyWithoutTbl_userInput
    tbl_transaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_UserInput
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUpdateManyWithoutTbl_userNestedInput
    tbl_transaction?: tbl_detailTransactionUpdateManyWithoutTbl_UserNestedInput
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedUpdateManyWithoutTbl_userNestedInput
    tbl_transaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_UserNestedInput
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_UserCreateManyInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
  }

  export type tbl_UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type tbl_UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type tbl_MenuCreateInput = {
    id?: string
    nameMenu: string
    priceMenu: number
    descMenu: string
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_MenuInput
  }

  export type tbl_MenuUncheckedCreateInput = {
    id?: string
    nameMenu: string
    priceMenu: number
    descMenu: string
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_MenuInput
  }

  export type tbl_MenuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_MenuNestedInput
  }

  export type tbl_MenuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_MenuNestedInput
  }

  export type tbl_MenuCreateManyInput = {
    id?: string
    nameMenu: string
    priceMenu: number
    descMenu: string
  }

  export type tbl_MenuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_MenuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_detailTransactionCreateInput = {
    id?: string
    tbl_Transaction?: tbl_TransactionCreateNestedOneWithoutTbl_detailTransactionInput
    total: number
    tbl_User?: tbl_UserCreateNestedOneWithoutTbl_transactionInput
  }

  export type tbl_detailTransactionUncheckedCreateInput = {
    id?: string
    idTransaction: string
    total: number
    tbl_UserId?: string | null
  }

  export type tbl_detailTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUpdateOneWithoutTbl_detailTransactionNestedInput
    total?: IntFieldUpdateOperationsInput | number
    tbl_User?: tbl_UserUpdateOneWithoutTbl_transactionNestedInput
  }

  export type tbl_detailTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idTransaction?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    tbl_UserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_detailTransactionCreateManyInput = {
    id?: string
    idTransaction: string
    total: number
    tbl_UserId?: string | null
  }

  export type tbl_detailTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
  }

  export type tbl_detailTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    idTransaction?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    tbl_UserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_detailOutletCreateInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_detailOutletInput
    alamatOutlet: string
    Status: string
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_detailOutletInput
  }

  export type tbl_detailOutletUncheckedCreateInput = {
    id?: string
    idUser: string
    alamatOutlet: string
    Status: string
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_detailOutletInput
  }

  export type tbl_detailOutletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_detailOutletNestedInput
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_detailOutletNestedInput
  }

  export type tbl_detailOutletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_detailOutletNestedInput
  }

  export type tbl_detailOutletCreateManyInput = {
    id?: string
    idUser: string
    alamatOutlet: string
    Status: string
  }

  export type tbl_detailOutletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_detailOutletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_TransactionCreateInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_TransactionInput
    tbl_detailOutlet?: tbl_detailOutletCreateNestedOneWithoutTbl_TransactionInput
    tbl_Menu?: tbl_MenuCreateNestedOneWithoutTbl_TransactionInput
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionUncheckedCreateInput = {
    id?: string
    idUser: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_TransactionNestedInput
    tbl_detailOutlet?: tbl_detailOutletUpdateOneWithoutTbl_TransactionNestedInput
    tbl_Menu?: tbl_MenuUpdateOneWithoutTbl_TransactionNestedInput
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionCreateManyInput = {
    id?: string
    idUser: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_logCreateInput = {
    id?: string
    jenisLog: string
    created_at: Date | string
    idUser: string
  }

  export type tbl_logUncheckedCreateInput = {
    id?: string
    jenisLog: string
    created_at: Date | string
    idUser: string
  }

  export type tbl_logUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jenisLog?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_logUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jenisLog?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_logCreateManyInput = {
    id?: string
    jenisLog: string
    created_at: Date | string
    idUser: string
  }

  export type tbl_logUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jenisLog?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_logUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jenisLog?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    idUser?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type Tbl_detailOutletListRelationFilter = {
    every?: tbl_detailOutletWhereInput
    some?: tbl_detailOutletWhereInput
    none?: tbl_detailOutletWhereInput
  }

  export type Tbl_detailTransactionListRelationFilter = {
    every?: tbl_detailTransactionWhereInput
    some?: tbl_detailTransactionWhereInput
    none?: tbl_detailTransactionWhereInput
  }

  export type Tbl_TransactionListRelationFilter = {
    every?: tbl_TransactionWhereInput
    some?: tbl_TransactionWhereInput
    none?: tbl_TransactionWhereInput
  }

  export type tbl_detailOutletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbl_detailTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbl_TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbl_UserCountOrderByAggregateInput = {
    id?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    noHp?: SortOrder
    email?: SortOrder
    Role?: SortOrder
  }

  export type tbl_UserMaxOrderByAggregateInput = {
    id?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    noHp?: SortOrder
    email?: SortOrder
    Role?: SortOrder
  }

  export type tbl_UserMinOrderByAggregateInput = {
    id?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    noHp?: SortOrder
    email?: SortOrder
    Role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type tbl_MenuCountOrderByAggregateInput = {
    id?: SortOrder
    nameMenu?: SortOrder
    priceMenu?: SortOrder
    descMenu?: SortOrder
  }

  export type tbl_MenuAvgOrderByAggregateInput = {
    priceMenu?: SortOrder
  }

  export type tbl_MenuMaxOrderByAggregateInput = {
    id?: SortOrder
    nameMenu?: SortOrder
    priceMenu?: SortOrder
    descMenu?: SortOrder
  }

  export type tbl_MenuMinOrderByAggregateInput = {
    id?: SortOrder
    nameMenu?: SortOrder
    priceMenu?: SortOrder
    descMenu?: SortOrder
  }

  export type tbl_MenuSumOrderByAggregateInput = {
    priceMenu?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type Tbl_TransactionRelationFilter = {
    is?: tbl_TransactionWhereInput | null
    isNot?: tbl_TransactionWhereInput | null
  }

  export type Tbl_UserRelationFilter = {
    is?: tbl_UserWhereInput | null
    isNot?: tbl_UserWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type tbl_detailTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    idTransaction?: SortOrder
    total?: SortOrder
    tbl_UserId?: SortOrder
  }

  export type tbl_detailTransactionAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type tbl_detailTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    idTransaction?: SortOrder
    total?: SortOrder
    tbl_UserId?: SortOrder
  }

  export type tbl_detailTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    idTransaction?: SortOrder
    total?: SortOrder
    tbl_UserId?: SortOrder
  }

  export type tbl_detailTransactionSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type tbl_detailOutletCountOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    alamatOutlet?: SortOrder
    Status?: SortOrder
  }

  export type tbl_detailOutletMaxOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    alamatOutlet?: SortOrder
    Status?: SortOrder
  }

  export type tbl_detailOutletMinOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    alamatOutlet?: SortOrder
    Status?: SortOrder
  }

  export type Tbl_detailOutletRelationFilter = {
    is?: tbl_detailOutletWhereInput | null
    isNot?: tbl_detailOutletWhereInput | null
  }

  export type Tbl_MenuRelationFilter = {
    is?: tbl_MenuWhereInput | null
    isNot?: tbl_MenuWhereInput | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type tbl_TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idOutlet?: SortOrder
    idMenu?: SortOrder
    status?: SortOrder
    payment?: SortOrder
    time?: SortOrder
    promo?: SortOrder
  }

  export type tbl_TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idOutlet?: SortOrder
    idMenu?: SortOrder
    status?: SortOrder
    payment?: SortOrder
    time?: SortOrder
    promo?: SortOrder
  }

  export type tbl_TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    idUser?: SortOrder
    idOutlet?: SortOrder
    idMenu?: SortOrder
    status?: SortOrder
    payment?: SortOrder
    time?: SortOrder
    promo?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type tbl_logCountOrderByAggregateInput = {
    id?: SortOrder
    jenisLog?: SortOrder
    created_at?: SortOrder
    idUser?: SortOrder
  }

  export type tbl_logMaxOrderByAggregateInput = {
    id?: SortOrder
    jenisLog?: SortOrder
    created_at?: SortOrder
    idUser?: SortOrder
  }

  export type tbl_logMinOrderByAggregateInput = {
    id?: SortOrder
    jenisLog?: SortOrder
    created_at?: SortOrder
    idUser?: SortOrder
  }

  export type tbl_detailOutletCreateNestedManyWithoutTbl_userInput = {
    create?: XOR<Enumerable<tbl_detailOutletCreateWithoutTbl_userInput>, Enumerable<tbl_detailOutletUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_detailOutletCreateOrConnectWithoutTbl_userInput>
    createMany?: tbl_detailOutletCreateManyTbl_userInputEnvelope
    connect?: Enumerable<tbl_detailOutletWhereUniqueInput>
  }

  export type tbl_detailTransactionCreateNestedManyWithoutTbl_UserInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_UserInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_UserInput>
    createMany?: tbl_detailTransactionCreateManyTbl_UserInputEnvelope
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
  }

  export type tbl_TransactionCreateNestedManyWithoutTbl_userInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_userInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_userInput>
    createMany?: tbl_TransactionCreateManyTbl_userInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type tbl_detailOutletUncheckedCreateNestedManyWithoutTbl_userInput = {
    create?: XOR<Enumerable<tbl_detailOutletCreateWithoutTbl_userInput>, Enumerable<tbl_detailOutletUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_detailOutletCreateOrConnectWithoutTbl_userInput>
    createMany?: tbl_detailOutletCreateManyTbl_userInputEnvelope
    connect?: Enumerable<tbl_detailOutletWhereUniqueInput>
  }

  export type tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_UserInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_UserInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_UserInput>
    createMany?: tbl_detailTransactionCreateManyTbl_UserInputEnvelope
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
  }

  export type tbl_TransactionUncheckedCreateNestedManyWithoutTbl_userInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_userInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_userInput>
    createMany?: tbl_TransactionCreateManyTbl_userInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type tbl_detailOutletUpdateManyWithoutTbl_userNestedInput = {
    create?: XOR<Enumerable<tbl_detailOutletCreateWithoutTbl_userInput>, Enumerable<tbl_detailOutletUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_detailOutletCreateOrConnectWithoutTbl_userInput>
    upsert?: Enumerable<tbl_detailOutletUpsertWithWhereUniqueWithoutTbl_userInput>
    createMany?: tbl_detailOutletCreateManyTbl_userInputEnvelope
    set?: Enumerable<tbl_detailOutletWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailOutletWhereUniqueInput>
    delete?: Enumerable<tbl_detailOutletWhereUniqueInput>
    connect?: Enumerable<tbl_detailOutletWhereUniqueInput>
    update?: Enumerable<tbl_detailOutletUpdateWithWhereUniqueWithoutTbl_userInput>
    updateMany?: Enumerable<tbl_detailOutletUpdateManyWithWhereWithoutTbl_userInput>
    deleteMany?: Enumerable<tbl_detailOutletScalarWhereInput>
  }

  export type tbl_detailTransactionUpdateManyWithoutTbl_UserNestedInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_UserInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_UserInput>
    upsert?: Enumerable<tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_UserInput>
    createMany?: tbl_detailTransactionCreateManyTbl_UserInputEnvelope
    set?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    delete?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    update?: Enumerable<tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_UserInput>
    updateMany?: Enumerable<tbl_detailTransactionUpdateManyWithWhereWithoutTbl_UserInput>
    deleteMany?: Enumerable<tbl_detailTransactionScalarWhereInput>
  }

  export type tbl_TransactionUpdateManyWithoutTbl_userNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_userInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_userInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_userInput>
    createMany?: tbl_TransactionCreateManyTbl_userInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_userInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_userInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_detailOutletUncheckedUpdateManyWithoutTbl_userNestedInput = {
    create?: XOR<Enumerable<tbl_detailOutletCreateWithoutTbl_userInput>, Enumerable<tbl_detailOutletUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_detailOutletCreateOrConnectWithoutTbl_userInput>
    upsert?: Enumerable<tbl_detailOutletUpsertWithWhereUniqueWithoutTbl_userInput>
    createMany?: tbl_detailOutletCreateManyTbl_userInputEnvelope
    set?: Enumerable<tbl_detailOutletWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailOutletWhereUniqueInput>
    delete?: Enumerable<tbl_detailOutletWhereUniqueInput>
    connect?: Enumerable<tbl_detailOutletWhereUniqueInput>
    update?: Enumerable<tbl_detailOutletUpdateWithWhereUniqueWithoutTbl_userInput>
    updateMany?: Enumerable<tbl_detailOutletUpdateManyWithWhereWithoutTbl_userInput>
    deleteMany?: Enumerable<tbl_detailOutletScalarWhereInput>
  }

  export type tbl_detailTransactionUncheckedUpdateManyWithoutTbl_UserNestedInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_UserInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_UserInput>
    upsert?: Enumerable<tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_UserInput>
    createMany?: tbl_detailTransactionCreateManyTbl_UserInputEnvelope
    set?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    delete?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    update?: Enumerable<tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_UserInput>
    updateMany?: Enumerable<tbl_detailTransactionUpdateManyWithWhereWithoutTbl_UserInput>
    deleteMany?: Enumerable<tbl_detailTransactionScalarWhereInput>
  }

  export type tbl_TransactionUncheckedUpdateManyWithoutTbl_userNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_userInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_userInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_userInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_userInput>
    createMany?: tbl_TransactionCreateManyTbl_userInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_userInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_userInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_TransactionCreateNestedManyWithoutTbl_MenuInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_MenuInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_MenuInput>
    createMany?: tbl_TransactionCreateManyTbl_MenuInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type tbl_TransactionUncheckedCreateNestedManyWithoutTbl_MenuInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_MenuInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_MenuInput>
    createMany?: tbl_TransactionCreateManyTbl_MenuInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tbl_TransactionUpdateManyWithoutTbl_MenuNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_MenuInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_MenuInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_MenuInput>
    createMany?: tbl_TransactionCreateManyTbl_MenuInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_MenuInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_MenuInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_TransactionUncheckedUpdateManyWithoutTbl_MenuNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_MenuInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_MenuInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_MenuInput>
    createMany?: tbl_TransactionCreateManyTbl_MenuInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_MenuInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_MenuInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_TransactionCreateNestedOneWithoutTbl_detailTransactionInput = {
    create?: XOR<tbl_TransactionCreateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedCreateWithoutTbl_detailTransactionInput>
    connectOrCreate?: tbl_TransactionCreateOrConnectWithoutTbl_detailTransactionInput
    connect?: tbl_TransactionWhereUniqueInput
  }

  export type tbl_UserCreateNestedOneWithoutTbl_transactionInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_transactionInput, tbl_UserUncheckedCreateWithoutTbl_transactionInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_transactionInput
    connect?: tbl_UserWhereUniqueInput
  }

  export type tbl_TransactionUpdateOneWithoutTbl_detailTransactionNestedInput = {
    create?: XOR<tbl_TransactionCreateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedCreateWithoutTbl_detailTransactionInput>
    connectOrCreate?: tbl_TransactionCreateOrConnectWithoutTbl_detailTransactionInput
    upsert?: tbl_TransactionUpsertWithoutTbl_detailTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_TransactionWhereUniqueInput
    update?: XOR<tbl_TransactionUpdateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedUpdateWithoutTbl_detailTransactionInput>
  }

  export type tbl_UserUpdateOneWithoutTbl_transactionNestedInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_transactionInput, tbl_UserUncheckedCreateWithoutTbl_transactionInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_transactionInput
    upsert?: tbl_UserUpsertWithoutTbl_transactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_UserWhereUniqueInput
    update?: XOR<tbl_UserUpdateWithoutTbl_transactionInput, tbl_UserUncheckedUpdateWithoutTbl_transactionInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type tbl_UserCreateNestedOneWithoutTbl_detailOutletInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_detailOutletInput, tbl_UserUncheckedCreateWithoutTbl_detailOutletInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_detailOutletInput
    connect?: tbl_UserWhereUniqueInput
  }

  export type tbl_TransactionCreateNestedManyWithoutTbl_detailOutletInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_detailOutletInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_detailOutletInput>
    createMany?: tbl_TransactionCreateManyTbl_detailOutletInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type tbl_TransactionUncheckedCreateNestedManyWithoutTbl_detailOutletInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_detailOutletInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_detailOutletInput>
    createMany?: tbl_TransactionCreateManyTbl_detailOutletInputEnvelope
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
  }

  export type tbl_UserUpdateOneWithoutTbl_detailOutletNestedInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_detailOutletInput, tbl_UserUncheckedCreateWithoutTbl_detailOutletInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_detailOutletInput
    upsert?: tbl_UserUpsertWithoutTbl_detailOutletInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_UserWhereUniqueInput
    update?: XOR<tbl_UserUpdateWithoutTbl_detailOutletInput, tbl_UserUncheckedUpdateWithoutTbl_detailOutletInput>
  }

  export type tbl_TransactionUpdateManyWithoutTbl_detailOutletNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_detailOutletInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_detailOutletInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_detailOutletInput>
    createMany?: tbl_TransactionCreateManyTbl_detailOutletInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_detailOutletInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_detailOutletInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_TransactionUncheckedUpdateManyWithoutTbl_detailOutletNestedInput = {
    create?: XOR<Enumerable<tbl_TransactionCreateWithoutTbl_detailOutletInput>, Enumerable<tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>>
    connectOrCreate?: Enumerable<tbl_TransactionCreateOrConnectWithoutTbl_detailOutletInput>
    upsert?: Enumerable<tbl_TransactionUpsertWithWhereUniqueWithoutTbl_detailOutletInput>
    createMany?: tbl_TransactionCreateManyTbl_detailOutletInputEnvelope
    set?: Enumerable<tbl_TransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_TransactionWhereUniqueInput>
    delete?: Enumerable<tbl_TransactionWhereUniqueInput>
    connect?: Enumerable<tbl_TransactionWhereUniqueInput>
    update?: Enumerable<tbl_TransactionUpdateWithWhereUniqueWithoutTbl_detailOutletInput>
    updateMany?: Enumerable<tbl_TransactionUpdateManyWithWhereWithoutTbl_detailOutletInput>
    deleteMany?: Enumerable<tbl_TransactionScalarWhereInput>
  }

  export type tbl_UserCreateNestedOneWithoutTbl_TransactionInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_TransactionInput, tbl_UserUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_TransactionInput
    connect?: tbl_UserWhereUniqueInput
  }

  export type tbl_detailOutletCreateNestedOneWithoutTbl_TransactionInput = {
    create?: XOR<tbl_detailOutletCreateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_detailOutletCreateOrConnectWithoutTbl_TransactionInput
    connect?: tbl_detailOutletWhereUniqueInput
  }

  export type tbl_MenuCreateNestedOneWithoutTbl_TransactionInput = {
    create?: XOR<tbl_MenuCreateWithoutTbl_TransactionInput, tbl_MenuUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_MenuCreateOrConnectWithoutTbl_TransactionInput
    connect?: tbl_MenuWhereUniqueInput
  }

  export type tbl_detailTransactionCreateNestedManyWithoutTbl_TransactionInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_TransactionInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_TransactionInput>
    createMany?: tbl_detailTransactionCreateManyTbl_TransactionInputEnvelope
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
  }

  export type tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_TransactionInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_TransactionInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_TransactionInput>
    createMany?: tbl_detailTransactionCreateManyTbl_TransactionInputEnvelope
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
  }

  export type tbl_UserUpdateOneWithoutTbl_TransactionNestedInput = {
    create?: XOR<tbl_UserCreateWithoutTbl_TransactionInput, tbl_UserUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_UserCreateOrConnectWithoutTbl_TransactionInput
    upsert?: tbl_UserUpsertWithoutTbl_TransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_UserWhereUniqueInput
    update?: XOR<tbl_UserUpdateWithoutTbl_TransactionInput, tbl_UserUncheckedUpdateWithoutTbl_TransactionInput>
  }

  export type tbl_detailOutletUpdateOneWithoutTbl_TransactionNestedInput = {
    create?: XOR<tbl_detailOutletCreateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_detailOutletCreateOrConnectWithoutTbl_TransactionInput
    upsert?: tbl_detailOutletUpsertWithoutTbl_TransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_detailOutletWhereUniqueInput
    update?: XOR<tbl_detailOutletUpdateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedUpdateWithoutTbl_TransactionInput>
  }

  export type tbl_MenuUpdateOneWithoutTbl_TransactionNestedInput = {
    create?: XOR<tbl_MenuCreateWithoutTbl_TransactionInput, tbl_MenuUncheckedCreateWithoutTbl_TransactionInput>
    connectOrCreate?: tbl_MenuCreateOrConnectWithoutTbl_TransactionInput
    upsert?: tbl_MenuUpsertWithoutTbl_TransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_MenuWhereUniqueInput
    update?: XOR<tbl_MenuUpdateWithoutTbl_TransactionInput, tbl_MenuUncheckedUpdateWithoutTbl_TransactionInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type tbl_detailTransactionUpdateManyWithoutTbl_TransactionNestedInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_TransactionInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_TransactionInput>
    upsert?: Enumerable<tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_TransactionInput>
    createMany?: tbl_detailTransactionCreateManyTbl_TransactionInputEnvelope
    set?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    delete?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    update?: Enumerable<tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_TransactionInput>
    updateMany?: Enumerable<tbl_detailTransactionUpdateManyWithWhereWithoutTbl_TransactionInput>
    deleteMany?: Enumerable<tbl_detailTransactionScalarWhereInput>
  }

  export type tbl_detailTransactionUncheckedUpdateManyWithoutTbl_TransactionNestedInput = {
    create?: XOR<Enumerable<tbl_detailTransactionCreateWithoutTbl_TransactionInput>, Enumerable<tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>>
    connectOrCreate?: Enumerable<tbl_detailTransactionCreateOrConnectWithoutTbl_TransactionInput>
    upsert?: Enumerable<tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_TransactionInput>
    createMany?: tbl_detailTransactionCreateManyTbl_TransactionInputEnvelope
    set?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    disconnect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    delete?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    connect?: Enumerable<tbl_detailTransactionWhereUniqueInput>
    update?: Enumerable<tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_TransactionInput>
    updateMany?: Enumerable<tbl_detailTransactionUpdateManyWithWhereWithoutTbl_TransactionInput>
    deleteMany?: Enumerable<tbl_detailTransactionScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type tbl_detailOutletCreateWithoutTbl_userInput = {
    id?: string
    alamatOutlet: string
    Status: string
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_detailOutletInput
  }

  export type tbl_detailOutletUncheckedCreateWithoutTbl_userInput = {
    id?: string
    alamatOutlet: string
    Status: string
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_detailOutletInput
  }

  export type tbl_detailOutletCreateOrConnectWithoutTbl_userInput = {
    where: tbl_detailOutletWhereUniqueInput
    create: XOR<tbl_detailOutletCreateWithoutTbl_userInput, tbl_detailOutletUncheckedCreateWithoutTbl_userInput>
  }

  export type tbl_detailOutletCreateManyTbl_userInputEnvelope = {
    data: Enumerable<tbl_detailOutletCreateManyTbl_userInput>
    skipDuplicates?: boolean
  }

  export type tbl_detailTransactionCreateWithoutTbl_UserInput = {
    id?: string
    tbl_Transaction?: tbl_TransactionCreateNestedOneWithoutTbl_detailTransactionInput
    total: number
  }

  export type tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput = {
    id?: string
    idTransaction: string
    total: number
  }

  export type tbl_detailTransactionCreateOrConnectWithoutTbl_UserInput = {
    where: tbl_detailTransactionWhereUniqueInput
    create: XOR<tbl_detailTransactionCreateWithoutTbl_UserInput, tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>
  }

  export type tbl_detailTransactionCreateManyTbl_UserInputEnvelope = {
    data: Enumerable<tbl_detailTransactionCreateManyTbl_UserInput>
    skipDuplicates?: boolean
  }

  export type tbl_TransactionCreateWithoutTbl_userInput = {
    id?: string
    tbl_detailOutlet?: tbl_detailOutletCreateNestedOneWithoutTbl_TransactionInput
    tbl_Menu?: tbl_MenuCreateNestedOneWithoutTbl_TransactionInput
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionUncheckedCreateWithoutTbl_userInput = {
    id?: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionCreateOrConnectWithoutTbl_userInput = {
    where: tbl_TransactionWhereUniqueInput
    create: XOR<tbl_TransactionCreateWithoutTbl_userInput, tbl_TransactionUncheckedCreateWithoutTbl_userInput>
  }

  export type tbl_TransactionCreateManyTbl_userInputEnvelope = {
    data: Enumerable<tbl_TransactionCreateManyTbl_userInput>
    skipDuplicates?: boolean
  }

  export type tbl_detailOutletUpsertWithWhereUniqueWithoutTbl_userInput = {
    where: tbl_detailOutletWhereUniqueInput
    update: XOR<tbl_detailOutletUpdateWithoutTbl_userInput, tbl_detailOutletUncheckedUpdateWithoutTbl_userInput>
    create: XOR<tbl_detailOutletCreateWithoutTbl_userInput, tbl_detailOutletUncheckedCreateWithoutTbl_userInput>
  }

  export type tbl_detailOutletUpdateWithWhereUniqueWithoutTbl_userInput = {
    where: tbl_detailOutletWhereUniqueInput
    data: XOR<tbl_detailOutletUpdateWithoutTbl_userInput, tbl_detailOutletUncheckedUpdateWithoutTbl_userInput>
  }

  export type tbl_detailOutletUpdateManyWithWhereWithoutTbl_userInput = {
    where: tbl_detailOutletScalarWhereInput
    data: XOR<tbl_detailOutletUpdateManyMutationInput, tbl_detailOutletUncheckedUpdateManyWithoutTbl_detailOutletInput>
  }

  export type tbl_detailOutletScalarWhereInput = {
    AND?: Enumerable<tbl_detailOutletScalarWhereInput>
    OR?: Enumerable<tbl_detailOutletScalarWhereInput>
    NOT?: Enumerable<tbl_detailOutletScalarWhereInput>
    id?: StringFilter | string
    idUser?: StringFilter | string
    alamatOutlet?: StringFilter | string
    Status?: StringFilter | string
  }

  export type tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_UserInput = {
    where: tbl_detailTransactionWhereUniqueInput
    update: XOR<tbl_detailTransactionUpdateWithoutTbl_UserInput, tbl_detailTransactionUncheckedUpdateWithoutTbl_UserInput>
    create: XOR<tbl_detailTransactionCreateWithoutTbl_UserInput, tbl_detailTransactionUncheckedCreateWithoutTbl_UserInput>
  }

  export type tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_UserInput = {
    where: tbl_detailTransactionWhereUniqueInput
    data: XOR<tbl_detailTransactionUpdateWithoutTbl_UserInput, tbl_detailTransactionUncheckedUpdateWithoutTbl_UserInput>
  }

  export type tbl_detailTransactionUpdateManyWithWhereWithoutTbl_UserInput = {
    where: tbl_detailTransactionScalarWhereInput
    data: XOR<tbl_detailTransactionUpdateManyMutationInput, tbl_detailTransactionUncheckedUpdateManyWithoutTbl_transactionInput>
  }

  export type tbl_detailTransactionScalarWhereInput = {
    AND?: Enumerable<tbl_detailTransactionScalarWhereInput>
    OR?: Enumerable<tbl_detailTransactionScalarWhereInput>
    NOT?: Enumerable<tbl_detailTransactionScalarWhereInput>
    id?: StringFilter | string
    idTransaction?: StringFilter | string
    total?: IntFilter | number
    tbl_UserId?: StringNullableFilter | string | null
  }

  export type tbl_TransactionUpsertWithWhereUniqueWithoutTbl_userInput = {
    where: tbl_TransactionWhereUniqueInput
    update: XOR<tbl_TransactionUpdateWithoutTbl_userInput, tbl_TransactionUncheckedUpdateWithoutTbl_userInput>
    create: XOR<tbl_TransactionCreateWithoutTbl_userInput, tbl_TransactionUncheckedCreateWithoutTbl_userInput>
  }

  export type tbl_TransactionUpdateWithWhereUniqueWithoutTbl_userInput = {
    where: tbl_TransactionWhereUniqueInput
    data: XOR<tbl_TransactionUpdateWithoutTbl_userInput, tbl_TransactionUncheckedUpdateWithoutTbl_userInput>
  }

  export type tbl_TransactionUpdateManyWithWhereWithoutTbl_userInput = {
    where: tbl_TransactionScalarWhereInput
    data: XOR<tbl_TransactionUpdateManyMutationInput, tbl_TransactionUncheckedUpdateManyWithoutTbl_TransactionInput>
  }

  export type tbl_TransactionScalarWhereInput = {
    AND?: Enumerable<tbl_TransactionScalarWhereInput>
    OR?: Enumerable<tbl_TransactionScalarWhereInput>
    NOT?: Enumerable<tbl_TransactionScalarWhereInput>
    id?: StringFilter | string
    idUser?: StringFilter | string
    idOutlet?: StringFilter | string
    idMenu?: StringFilter | string
    status?: StringFilter | string
    payment?: StringFilter | string
    time?: DateTimeFilter | Date | string
    promo?: StringFilter | string
  }

  export type tbl_TransactionCreateWithoutTbl_MenuInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_TransactionInput
    tbl_detailOutlet?: tbl_detailOutletCreateNestedOneWithoutTbl_TransactionInput
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionUncheckedCreateWithoutTbl_MenuInput = {
    id?: string
    idUser: string
    idOutlet: string
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionCreateOrConnectWithoutTbl_MenuInput = {
    where: tbl_TransactionWhereUniqueInput
    create: XOR<tbl_TransactionCreateWithoutTbl_MenuInput, tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>
  }

  export type tbl_TransactionCreateManyTbl_MenuInputEnvelope = {
    data: Enumerable<tbl_TransactionCreateManyTbl_MenuInput>
    skipDuplicates?: boolean
  }

  export type tbl_TransactionUpsertWithWhereUniqueWithoutTbl_MenuInput = {
    where: tbl_TransactionWhereUniqueInput
    update: XOR<tbl_TransactionUpdateWithoutTbl_MenuInput, tbl_TransactionUncheckedUpdateWithoutTbl_MenuInput>
    create: XOR<tbl_TransactionCreateWithoutTbl_MenuInput, tbl_TransactionUncheckedCreateWithoutTbl_MenuInput>
  }

  export type tbl_TransactionUpdateWithWhereUniqueWithoutTbl_MenuInput = {
    where: tbl_TransactionWhereUniqueInput
    data: XOR<tbl_TransactionUpdateWithoutTbl_MenuInput, tbl_TransactionUncheckedUpdateWithoutTbl_MenuInput>
  }

  export type tbl_TransactionUpdateManyWithWhereWithoutTbl_MenuInput = {
    where: tbl_TransactionScalarWhereInput
    data: XOR<tbl_TransactionUpdateManyMutationInput, tbl_TransactionUncheckedUpdateManyWithoutTbl_TransactionInput>
  }

  export type tbl_TransactionCreateWithoutTbl_detailTransactionInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_TransactionInput
    tbl_detailOutlet?: tbl_detailOutletCreateNestedOneWithoutTbl_TransactionInput
    tbl_Menu?: tbl_MenuCreateNestedOneWithoutTbl_TransactionInput
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_TransactionUncheckedCreateWithoutTbl_detailTransactionInput = {
    id?: string
    idUser: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_TransactionCreateOrConnectWithoutTbl_detailTransactionInput = {
    where: tbl_TransactionWhereUniqueInput
    create: XOR<tbl_TransactionCreateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedCreateWithoutTbl_detailTransactionInput>
  }

  export type tbl_UserCreateWithoutTbl_transactionInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletCreateNestedManyWithoutTbl_userInput
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserUncheckedCreateWithoutTbl_transactionInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedCreateNestedManyWithoutTbl_userInput
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserCreateOrConnectWithoutTbl_transactionInput = {
    where: tbl_UserWhereUniqueInput
    create: XOR<tbl_UserCreateWithoutTbl_transactionInput, tbl_UserUncheckedCreateWithoutTbl_transactionInput>
  }

  export type tbl_TransactionUpsertWithoutTbl_detailTransactionInput = {
    update: XOR<tbl_TransactionUpdateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedUpdateWithoutTbl_detailTransactionInput>
    create: XOR<tbl_TransactionCreateWithoutTbl_detailTransactionInput, tbl_TransactionUncheckedCreateWithoutTbl_detailTransactionInput>
  }

  export type tbl_TransactionUpdateWithoutTbl_detailTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_TransactionNestedInput
    tbl_detailOutlet?: tbl_detailOutletUpdateOneWithoutTbl_TransactionNestedInput
    tbl_Menu?: tbl_MenuUpdateOneWithoutTbl_TransactionNestedInput
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_TransactionUncheckedUpdateWithoutTbl_detailTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_UserUpsertWithoutTbl_transactionInput = {
    update: XOR<tbl_UserUpdateWithoutTbl_transactionInput, tbl_UserUncheckedUpdateWithoutTbl_transactionInput>
    create: XOR<tbl_UserCreateWithoutTbl_transactionInput, tbl_UserUncheckedCreateWithoutTbl_transactionInput>
  }

  export type tbl_UserUpdateWithoutTbl_transactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUpdateManyWithoutTbl_userNestedInput
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_UserUncheckedUpdateWithoutTbl_transactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedUpdateManyWithoutTbl_userNestedInput
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_UserCreateWithoutTbl_detailOutletInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_transaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_UserInput
    tbl_Transaction?: tbl_TransactionCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserUncheckedCreateWithoutTbl_detailOutletInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_transaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_UserInput
    tbl_Transaction?: tbl_TransactionUncheckedCreateNestedManyWithoutTbl_userInput
  }

  export type tbl_UserCreateOrConnectWithoutTbl_detailOutletInput = {
    where: tbl_UserWhereUniqueInput
    create: XOR<tbl_UserCreateWithoutTbl_detailOutletInput, tbl_UserUncheckedCreateWithoutTbl_detailOutletInput>
  }

  export type tbl_TransactionCreateWithoutTbl_detailOutletInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_TransactionInput
    tbl_Menu?: tbl_MenuCreateNestedOneWithoutTbl_TransactionInput
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput = {
    id?: string
    idUser: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_TransactionInput
  }

  export type tbl_TransactionCreateOrConnectWithoutTbl_detailOutletInput = {
    where: tbl_TransactionWhereUniqueInput
    create: XOR<tbl_TransactionCreateWithoutTbl_detailOutletInput, tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>
  }

  export type tbl_TransactionCreateManyTbl_detailOutletInputEnvelope = {
    data: Enumerable<tbl_TransactionCreateManyTbl_detailOutletInput>
    skipDuplicates?: boolean
  }

  export type tbl_UserUpsertWithoutTbl_detailOutletInput = {
    update: XOR<tbl_UserUpdateWithoutTbl_detailOutletInput, tbl_UserUncheckedUpdateWithoutTbl_detailOutletInput>
    create: XOR<tbl_UserCreateWithoutTbl_detailOutletInput, tbl_UserUncheckedCreateWithoutTbl_detailOutletInput>
  }

  export type tbl_UserUpdateWithoutTbl_detailOutletInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_transaction?: tbl_detailTransactionUpdateManyWithoutTbl_UserNestedInput
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_UserUncheckedUpdateWithoutTbl_detailOutletInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_transaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_UserNestedInput
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_userNestedInput
  }

  export type tbl_TransactionUpsertWithWhereUniqueWithoutTbl_detailOutletInput = {
    where: tbl_TransactionWhereUniqueInput
    update: XOR<tbl_TransactionUpdateWithoutTbl_detailOutletInput, tbl_TransactionUncheckedUpdateWithoutTbl_detailOutletInput>
    create: XOR<tbl_TransactionCreateWithoutTbl_detailOutletInput, tbl_TransactionUncheckedCreateWithoutTbl_detailOutletInput>
  }

  export type tbl_TransactionUpdateWithWhereUniqueWithoutTbl_detailOutletInput = {
    where: tbl_TransactionWhereUniqueInput
    data: XOR<tbl_TransactionUpdateWithoutTbl_detailOutletInput, tbl_TransactionUncheckedUpdateWithoutTbl_detailOutletInput>
  }

  export type tbl_TransactionUpdateManyWithWhereWithoutTbl_detailOutletInput = {
    where: tbl_TransactionScalarWhereInput
    data: XOR<tbl_TransactionUpdateManyMutationInput, tbl_TransactionUncheckedUpdateManyWithoutTbl_TransactionInput>
  }

  export type tbl_UserCreateWithoutTbl_TransactionInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletCreateNestedManyWithoutTbl_userInput
    tbl_transaction?: tbl_detailTransactionCreateNestedManyWithoutTbl_UserInput
  }

  export type tbl_UserUncheckedCreateWithoutTbl_TransactionInput = {
    id?: string
    Username: string
    Password: string
    noHp: string
    email: string
    Role?: Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedCreateNestedManyWithoutTbl_userInput
    tbl_transaction?: tbl_detailTransactionUncheckedCreateNestedManyWithoutTbl_UserInput
  }

  export type tbl_UserCreateOrConnectWithoutTbl_TransactionInput = {
    where: tbl_UserWhereUniqueInput
    create: XOR<tbl_UserCreateWithoutTbl_TransactionInput, tbl_UserUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_detailOutletCreateWithoutTbl_TransactionInput = {
    id?: string
    tbl_user?: tbl_UserCreateNestedOneWithoutTbl_detailOutletInput
    alamatOutlet: string
    Status: string
  }

  export type tbl_detailOutletUncheckedCreateWithoutTbl_TransactionInput = {
    id?: string
    idUser: string
    alamatOutlet: string
    Status: string
  }

  export type tbl_detailOutletCreateOrConnectWithoutTbl_TransactionInput = {
    where: tbl_detailOutletWhereUniqueInput
    create: XOR<tbl_detailOutletCreateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_MenuCreateWithoutTbl_TransactionInput = {
    id?: string
    nameMenu: string
    priceMenu: number
    descMenu: string
  }

  export type tbl_MenuUncheckedCreateWithoutTbl_TransactionInput = {
    id?: string
    nameMenu: string
    priceMenu: number
    descMenu: string
  }

  export type tbl_MenuCreateOrConnectWithoutTbl_TransactionInput = {
    where: tbl_MenuWhereUniqueInput
    create: XOR<tbl_MenuCreateWithoutTbl_TransactionInput, tbl_MenuUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_detailTransactionCreateWithoutTbl_TransactionInput = {
    id?: string
    total: number
    tbl_User?: tbl_UserCreateNestedOneWithoutTbl_transactionInput
  }

  export type tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput = {
    id?: string
    total: number
    tbl_UserId?: string | null
  }

  export type tbl_detailTransactionCreateOrConnectWithoutTbl_TransactionInput = {
    where: tbl_detailTransactionWhereUniqueInput
    create: XOR<tbl_detailTransactionCreateWithoutTbl_TransactionInput, tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_detailTransactionCreateManyTbl_TransactionInputEnvelope = {
    data: Enumerable<tbl_detailTransactionCreateManyTbl_TransactionInput>
    skipDuplicates?: boolean
  }

  export type tbl_UserUpsertWithoutTbl_TransactionInput = {
    update: XOR<tbl_UserUpdateWithoutTbl_TransactionInput, tbl_UserUncheckedUpdateWithoutTbl_TransactionInput>
    create: XOR<tbl_UserCreateWithoutTbl_TransactionInput, tbl_UserUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_UserUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUpdateManyWithoutTbl_userNestedInput
    tbl_transaction?: tbl_detailTransactionUpdateManyWithoutTbl_UserNestedInput
  }

  export type tbl_UserUncheckedUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    noHp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | Role
    tbl_detailOutlet?: tbl_detailOutletUncheckedUpdateManyWithoutTbl_userNestedInput
    tbl_transaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_UserNestedInput
  }

  export type tbl_detailOutletUpsertWithoutTbl_TransactionInput = {
    update: XOR<tbl_detailOutletUpdateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedUpdateWithoutTbl_TransactionInput>
    create: XOR<tbl_detailOutletCreateWithoutTbl_TransactionInput, tbl_detailOutletUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_detailOutletUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_detailOutletNestedInput
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_detailOutletUncheckedUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_MenuUpsertWithoutTbl_TransactionInput = {
    update: XOR<tbl_MenuUpdateWithoutTbl_TransactionInput, tbl_MenuUncheckedUpdateWithoutTbl_TransactionInput>
    create: XOR<tbl_MenuCreateWithoutTbl_TransactionInput, tbl_MenuUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_MenuUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_MenuUncheckedUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameMenu?: StringFieldUpdateOperationsInput | string
    priceMenu?: IntFieldUpdateOperationsInput | number
    descMenu?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_detailTransactionUpsertWithWhereUniqueWithoutTbl_TransactionInput = {
    where: tbl_detailTransactionWhereUniqueInput
    update: XOR<tbl_detailTransactionUpdateWithoutTbl_TransactionInput, tbl_detailTransactionUncheckedUpdateWithoutTbl_TransactionInput>
    create: XOR<tbl_detailTransactionCreateWithoutTbl_TransactionInput, tbl_detailTransactionUncheckedCreateWithoutTbl_TransactionInput>
  }

  export type tbl_detailTransactionUpdateWithWhereUniqueWithoutTbl_TransactionInput = {
    where: tbl_detailTransactionWhereUniqueInput
    data: XOR<tbl_detailTransactionUpdateWithoutTbl_TransactionInput, tbl_detailTransactionUncheckedUpdateWithoutTbl_TransactionInput>
  }

  export type tbl_detailTransactionUpdateManyWithWhereWithoutTbl_TransactionInput = {
    where: tbl_detailTransactionScalarWhereInput
    data: XOR<tbl_detailTransactionUpdateManyMutationInput, tbl_detailTransactionUncheckedUpdateManyWithoutTbl_detailTransactionInput>
  }

  export type tbl_detailOutletCreateManyTbl_userInput = {
    id?: string
    alamatOutlet: string
    Status: string
  }

  export type tbl_detailTransactionCreateManyTbl_UserInput = {
    id?: string
    idTransaction: string
    total: number
  }

  export type tbl_TransactionCreateManyTbl_userInput = {
    id?: string
    idOutlet: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_detailOutletUpdateWithoutTbl_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUpdateManyWithoutTbl_detailOutletNestedInput
  }

  export type tbl_detailOutletUncheckedUpdateWithoutTbl_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUncheckedUpdateManyWithoutTbl_detailOutletNestedInput
  }

  export type tbl_detailOutletUncheckedUpdateManyWithoutTbl_detailOutletInput = {
    id?: StringFieldUpdateOperationsInput | string
    alamatOutlet?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_detailTransactionUpdateWithoutTbl_UserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_Transaction?: tbl_TransactionUpdateOneWithoutTbl_detailTransactionNestedInput
    total?: IntFieldUpdateOperationsInput | number
  }

  export type tbl_detailTransactionUncheckedUpdateWithoutTbl_UserInput = {
    id?: StringFieldUpdateOperationsInput | string
    idTransaction?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
  }

  export type tbl_detailTransactionUncheckedUpdateManyWithoutTbl_transactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idTransaction?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
  }

  export type tbl_TransactionUpdateWithoutTbl_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_detailOutlet?: tbl_detailOutletUpdateOneWithoutTbl_TransactionNestedInput
    tbl_Menu?: tbl_MenuUpdateOneWithoutTbl_TransactionNestedInput
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionUncheckedUpdateWithoutTbl_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionUncheckedUpdateManyWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
  }

  export type tbl_TransactionCreateManyTbl_MenuInput = {
    id?: string
    idUser: string
    idOutlet: string
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_TransactionUpdateWithoutTbl_MenuInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_TransactionNestedInput
    tbl_detailOutlet?: tbl_detailOutletUpdateOneWithoutTbl_TransactionNestedInput
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionUncheckedUpdateWithoutTbl_MenuInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    idOutlet?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionCreateManyTbl_detailOutletInput = {
    id?: string
    idUser: string
    idMenu: string
    status: string
    payment: string
    time?: Date | string
    promo: string
  }

  export type tbl_TransactionUpdateWithoutTbl_detailOutletInput = {
    id?: StringFieldUpdateOperationsInput | string
    tbl_user?: tbl_UserUpdateOneWithoutTbl_TransactionNestedInput
    tbl_Menu?: tbl_MenuUpdateOneWithoutTbl_TransactionNestedInput
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_TransactionUncheckedUpdateWithoutTbl_detailOutletInput = {
    id?: StringFieldUpdateOperationsInput | string
    idUser?: StringFieldUpdateOperationsInput | string
    idMenu?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    promo?: StringFieldUpdateOperationsInput | string
    tbl_detailTransaction?: tbl_detailTransactionUncheckedUpdateManyWithoutTbl_TransactionNestedInput
  }

  export type tbl_detailTransactionCreateManyTbl_TransactionInput = {
    id?: string
    total: number
    tbl_UserId?: string | null
  }

  export type tbl_detailTransactionUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    tbl_User?: tbl_UserUpdateOneWithoutTbl_transactionNestedInput
  }

  export type tbl_detailTransactionUncheckedUpdateWithoutTbl_TransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    tbl_UserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_detailTransactionUncheckedUpdateManyWithoutTbl_detailTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    tbl_UserId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}